import { Logger, Injectable, Inject, ForbiddenException, BadRequestException, InternalServerErrorException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { ModuleControlService } from '../module-control/module-control.service';
<% if (className === 'File') { %>
import * as fs from 'fs-extra';
import * as path from 'path';
import { Readable } from 'stream';
import { lookup as mimeLookup } from 'mime-types';
import { ReadFileResponseDto } from './dto/read-file-response.dto';
import { get as httpGet } from 'http';
import { get as httpsGet } from 'https';
import { URL } from 'url';

<% } %>
import {
  Create<%= className %>Dto,
  Pagination<%= className %>ResultDto,
  Pagination<%= className %>QueryDto,
} from './dto/create-<%= folderName %>.dto';

import { Update<%= className %>Dto } from './dto/update-<%= folderName %>.dto';

import { Prisma<% if (className === 'User') { %>, Role<% } %> } from '@prisma/client';
<% if (className === 'User') { %>
import * as bcrypt from 'bcrypt';
import { CreateJwtUserDto } from '../auth/dto/auth.dto';
<% } else if (isProtected || hasCreatedBy) { %>
import { CreateJwtUserDto } from '../auth/dto/auth.dto';
<% } %>
<% if (hasCreatedBy || isProtected) { %>
import { REQUEST } from '@nestjs/core';
import { Request, Response } from 'express';
<% } %>

<% if (className === 'File') { %>
const language = (
  filename: string,
  mimeType?: string,
): string | undefined => {
  if (!filename) return;

  const ext = filename.split('.').pop()?.toLowerCase();

  const extMap: Record<string, string> = {
    js: 'javascript',
    ts: 'typescript',
    tsx: 'typescript',
    json: 'json',
    html: 'html',
    css: 'css',
    md: 'markdown',
    py: 'python',
    java: 'java',
    cpp: 'cpp',
    cs: 'csharp',
    rs: 'rust',
    sh: 'shell',
    yml: 'yaml',
    yaml: 'yaml',
    xml: 'xml',
    txt: 'plaintext',
    go: 'go',
    php: 'php',
  };

  if (ext && extMap[ext]) {
    return extMap[ext];
  }

  // Use mime-types library if mimeType not provided
  const detectedMimeType = mimeType || mimeLookup(filename) || undefined;

  const mimeMap: Record<string, string> = {
    'application/json': 'json',
    'text/html': 'html',
    'text/css': 'css',
    'application/javascript': 'javascript',
    'application/typescript': 'typescript',
    'text/markdown': 'markdown',
    'application/xml': 'xml',
    'text/x-python': 'python',
    'text/plain': 'plaintext',
    'video/mp2t': 'typescript', // override for .ts files
  };

  return detectedMimeType ? mimeMap[detectedMimeType] : undefined;
};
<% } %>
@Injectable()
export class <%= className %>Service {
  private readonly logger = new Logger(<%= className %>Service.name);
  constructor(
    <% if (className === 'File') { %>
    @Inject('EXCLUDED_FOLDERS') private readonly EXCLUDED_FOLDERS: string[],
    <% } %>
    private readonly moduleControlService: ModuleControlService, 
    private prisma: PrismaService,
    <% if (hasCreatedBy || isProtected) { %>@Inject(REQUEST) private readonly request: Request & { user?: CreateJwtUserDto },<% } %>
  ) {}
  // Use OnModuleInit to check the module status after all dependencies are initialized
  onModuleInit() {
    // Optionally, you could log a warning or take action if <%= className %>Module is disabled on startup
    if (!this.moduleControlService.isModuleEnabled('<%= className %>Module')) {
      this.logger.warn(
        '<%= className %>Module is currently disabled via ModuleControlService. <%= className %> operations will be restricted.',
      );
    }
  }
  private ensureFileModuleEnabled(): void {
    if (!this.moduleControlService.isModuleEnabled('<%= className %>Module')) {
      throw new ForbiddenException(
        '<%= className %> module is currently disabled. Cannot perform <%= className %> operations.',
      );
    }
  }
  <% if (className === 'File') { %>
  private getFileTree(dir: string, recursive: boolean = false): any[] {
  if (!fs.existsSync(dir)) return [];

  const files = fs.readdirSync(dir);
  return files
    .filter((file) => !this.EXCLUDED_FOLDERS.includes(file))
    .map((file) => {
      const filePath = path.join(dir, file);
      const isDirectory = fs.statSync(filePath).isDirectory();

      const mimeType = !isDirectory ? mimeLookup(filePath) || undefined : undefined;
      const lang = !isDirectory ? language(file, mimeType) : undefined;

      return {
        name: file,
        isDirectory,
        path: filePath,
        type: isDirectory ? 'folder' : 'file',
        mimeType,
        language: lang,
        children:
          isDirectory && recursive ? this.getFileTree(filePath, true) : null,
      };
    });
}
  
  <% } %>
  <% if (hasCreatedBy || isProtected) { %>
  private get userId(): string | undefined {
  return this.request.user?.id;
}
  <% } %>

  create(data: Create<%= className %>Dto) {
    this.ensureFileModuleEnabled();
    let createData: any = { ...data };

    
    <% if (hasCreatedBy && className !== 'User') { %>
    const hasCreatedById = data.hasOwnProperty('createdById');
    if (this.userId) {
      createData.createdBy = {
        connect: { id: this.userId },
      };
      if (hasCreatedById) {
        delete createData.createdById;
      }
      
    }
    <% } %>

   <% if (hasSubmittedById) { %>
    if (this.userId) {
      createData.submittedBy = {
        connect: { id: this.userId },
      };
       delete createData.submittedById;
    }
    <% } %>
    return this.prisma.<%= fileName %>.create({ data: createData });
  }
  <% if (className === 'SchemaSubmission') { %>
  async findBySchemaAndUser(schemaId: string, submittedById: string) {
    this.ensureFileModuleEnabled();

    return this.prisma.schemaSubmission.findMany({
      where: {
        schemaId,
        submittedById,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });
  }
  <% } %>
  async findAllPaginated(
  query: Pagination<%= className %>QueryDto,
  select?: Prisma.<%= className %>Select,
) {
  const page = query.page ? Number(query.page) : 1;
  const pageSize = query.pageSize ? Number(query.pageSize) : 10;
  const skip = (page - 1) * pageSize;
  const take = pageSize;

  const where = this.buildWhereFromQuery(query);

  const [items, total] = await this.prisma.$transaction([
    this.prisma.<%= fileName %>.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      skip,
      take,
      ...(select ? { select } : {}),
    }),
    this.prisma.<%= fileName %>.count({ where }),
  ]);

  return {
    items,
    total,
    page,
    pageSize,
    totalPages: Math.ceil(total / pageSize),
  };
}



  findAll() {
    this.ensureFileModuleEnabled();
    return this.prisma.<%= fileName %>.findMany();
  }

  findOne(id: string) {
    this.ensureFileModuleEnabled();

    return this.prisma.<%= fileName %>.findUnique(
    <% if (className === 'User') { %>
    {where: { id },
        include: {
          Account: true,
          Session: true,
          Folder: true,
          password: true,
        },
    }
    <% } else { %>
    { where: { id } }
    <% }  %>
    );
  }

  update(id: string, data: Update<%= className %>Dto) {
    this.ensureFileModuleEnabled();
    return this.prisma.<%= fileName %>.update({
      where: { id },
      data,
    });
  }

  remove(id: string) {
    return this.prisma.<%= fileName %>.delete({ where: { id } });
  }
<% if (className === 'File') { %>
  async getFilesByDirectory(
    directory: string = '',
    recursive: boolean = false,
  ): Promise<any> {
    try {
      const directoryPath = directory ? directory : process.cwd();
      return this.getFileTree(directoryPath, recursive);
    } catch (error) {
      return { error: (error as Error).message };
    }
  }
  readFile(
    buffer: Buffer,
    filename = 'file',
    asBlob = false,
    filepath: string,
  ): ReadFileResponseDto {
    const lang = language(filename, mimeLookup(filename));
    const mimeType = language(filename, mimeLookup(filename));

    const content = asBlob
      ? `data:${mimeType};base64,${buffer.toString('base64')}`
      : buffer.toString('utf-8');

    return {
      filepath,
      filename,
      mimeType: mimeLookup(mimeType) || 'text/plain',
      language: lang,
      data: content,
    };
  }
  async proxyImage(url: string, res: Response): Promise<void> {
    if (!url) {
      throw new BadRequestException('Missing image URL');
    }

    let parsedUrl: URL;
    try {
      parsedUrl = new URL(url);
      if (!['http:', 'https:'].includes(parsedUrl.protocol)) {
        throw new BadRequestException('Unsupported protocol');
      }
    } catch {
      throw new BadRequestException('Invalid image URL');
    }

    const client = parsedUrl.protocol === 'https:' ? httpsGet : httpGet;

    try {
      client(url, (imageRes) => {
        const contentType = imageRes.headers['content-type'] || 'image/jpeg';
        res.setHeader('Content-Type', contentType);
        imageRes.pipe(res);
        imageRes.on('error', () => {
          res.status(500).send('Error streaming image data');
        });
      }).on('error', () => {
        res.status(500).send('Error fetching image');
      });
    } catch {
      throw new InternalServerErrorException('Unexpected proxy error');
    }
  }
   // ───────────────────────────────────────────────────────────
  // CREATE FILE OR FOLDER
  // ───────────────────────────────────────────────────────────

  async create(dto: CreateLocalFileDto): Promise<{ success: boolean; message: string }> {
    const { filePath, isDirectory, content = '' } = dto;
    const resolvedPath = path.resolve(filePath);

    try {
      if (isDirectory) {
        await fs.mkdir(resolvedPath, { recursive: true });
        return { success: true, message: `Folder created at ${resolvedPath}` };
      } else {
        const dir = path.dirname(resolvedPath);
        await fs.mkdir(dir, { recursive: true });
        await fs.writeFile(resolvedPath, content, 'utf-8');
        return { success: true, message: `File created at ${resolvedPath}` };
      }
    } catch (error) {
      throw new InternalServerErrorException(`Failed to create: ${error.message}`);
    }
  }
  // ───────────────────────────────────────────────────────────
  // UPDATE A FILE
  // ───────────────────────────────────────────────────────────
  async update(id: string, dto: UpdateLocalFileDto): Promise<{ success: boolean; message: string }> {
    try {
      await fs.writeFile(id, dto.content, 'utf-8');
      return { success: true, message: 'File updated successfully' };
    } catch (error) {
      throw new NotFoundException(`Failed to update file: ${error.message}`);
    }
  }
  // ───────────────────────────────────────────────────────────
  // DELETE A FILE
  // ───────────────────────────────────────────────────────────
  async remove(path: string): Promise<{ success: boolean; message: string }> {
    try {
      await fs.rm(path, { recursive: true, force: true });
      return { success: true, message: 'File or folder deleted' };
    } catch (error) {
      throw new NotFoundException(`Failed to delete file or folder: ${error.message}`);
    }
  }
<% } %>
<% if (className === 'User') { %>
  async createUser(email: string, name: string, phone?: string, hash?: string) {
    return this.prisma.user.create({
      data: {
        email,
        name,
        phone_number: phone,
        role: Role.USER,
        password: hash ? { create: { hash } } : undefined,
      },
    });
  }

  async verifyEmail(userId: string) {
    return this.prisma.user.update({
      where: { id: userId },
      data: { emailVerified: new Date() },
    });
  }

  async validatePassword(password: string, hash: string) {
    return bcrypt.compare(password, hash);
  }

  async hashPassword(password: string): Promise<string> {
    return bcrypt.hash(password, 10);
  }

  findById(userId: string) {
    return this.prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        phone_number: true,
        createdAt: true,
      },
    });
  }

  async findByEmail(email: string) {
    return this.prisma.user.findUnique({
      where: { email },
      include: {
        password: true,
        Account: true,
      },
    });
  }
<% } %>
  
  
  private buildWhereFromQuery(query: Pagination<%= className %>QueryDto): Prisma.<%= className %>WhereInput {

  const where: Prisma.<%= className %>WhereInput = {
    <% if (hasCreatedBy || isProtected) { %>
    createdById:this.userId
    <%  } %>
  };
     
<% fields
  .filter(field =>
    !['id', 'createdAt', 'updatedAt', 'createdById', 'deletedAt'].includes(field.name)
  )
  .forEach(field => { -%>
  if (query.<%= field.name %> !== undefined) {
    <% if (Array.isArray(field) || field.type  === 'string[]') { %>
    where.<%= field.name %> = {
      hasSome: query.<%= field.name %>,
    };
    <% } else { %>
    where.<%= field.name %> = query.<%= field.name %>;
    <% } %>
  }
<% }) %>

  return where;
}
}
