generator client {
  provider = "prisma-client-js",
  output   = "../generated/appdb"
}

datasource db {
  provider = "postgresql"
  url      = env("APPDB_DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  createdAt          DateTime             @default(now())
  emailVerified      DateTime?
  image              String?
  name               String?
  phone_number       String?
  updatedAt          DateTime?            @updatedAt
  role               String?
  deletedAt          DateTime?
  Account            Account[]
  Chat               Chat[]
  DatabaseConnection DatabaseConnection[]
  Documentation      Documentation[]
  File               File[]
  Folder             Folder[]
  FormSchema         FormSchema[]
  FormSubmission     FormSubmission[]
  Message            Message[]
  Organization       Organization[]
  Password           Password?
  Project            Project[]
  Session            Session[]
  Snippet            Snippet[]
}

model Password {
  id        String   @id @default(uuid())
  hash      String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Documentation {
  id          String    @id @default(uuid())
  name        String
  content     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
}

model File {
  id          String    @id @default(uuid())
  name        String
  content     String
  createdAt   DateTime  @default(now())
  folderId    String?
  path        String    @unique
  updatedAt   DateTime? @updatedAt
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  folder      Folder?   @relation(fields: [folderId], references: [id])
}

model Folder {
  id          String    @id @default(uuid())
  name        String
  path        String    @unique
  parentId    String?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  files       File[]
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  parent      Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[]  @relation("FolderHierarchy")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model ApiUsage {
  id           String   @id
  messageId    String
  inputTokens  Int?
  outputTokens Int?
  cost         Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Message      Message  @relation(fields: [messageId], references: [id])
}

model Chat {
  id          String    @id
  title       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  createdById String
  User        User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  Message     Message[]
}

model DatabaseConnection {
  id               String   @id
  name             String
  type             String
  host             String?
  port             Int?
  username         String?
  password         String?
  databaseName     String?
  connectionString String?
  default          Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  createdById      String
  User             User     @relation(fields: [createdById], references: [id])
}

model FormSchema {
  id             String           @id
  title          String
  modelName      String
  schema         Json
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  createdById    String
  User           User             @relation(fields: [createdById], references: [id])
  FormSubmission FormSubmission[]
}

model FormSubmission {
  id          String     @id
  formId      String
  data        Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  createdById String
  User        User       @relation(fields: [createdById], references: [id])
  FormSchema  FormSchema @relation(fields: [formId], references: [id])
}

model Message {
  id          String     @id
  chatId      String
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  sender      String
  createdById String
  ApiUsage    ApiUsage[]
  Chat        Chat       @relation(fields: [chatId], references: [id])
  User        User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model Snippet {
  id          String   @id
  name        String?
  code        Json
  language    String?
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User?    @relation(fields: [createdById], references: [id])
}

enum Sender {
  USER
  AI
  ADMIN
  SUPERADMIN
  BOT
}
