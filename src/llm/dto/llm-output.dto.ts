// src/llm/dto/llm-output.dto.ts

import { IsString, IsArray, ValidateNested, IsEnum, IsOptional, IsDefined } from 'class-validator';
import { Type } from 'class-transformer';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger'; // Import Swagger decorators

// Enum for file action types, now imported from file-action.dto.ts
import { FileAction } from './file-action.dto';

/**
 * Represents a proposed file change by the LLM.
 */
export class ProposedFileChangeDto {
  @ApiProperty({
    description: 'The absolute or relative path of the file to be changed.',
    example: 'src/components/WelcomeMessage.tsx',
  })
  @IsString()
  @IsDefined()
  filePath: string;

  @ApiProperty({
    enum: FileAction,
    description: 'The type of operation to perform on the file.',
    example: FileAction.ADD,
  })
  @IsEnum(FileAction)
  @IsDefined()
  action: FileAction;

  @ApiPropertyOptional({
    description:
      'The new content of the file for "add", "modify", or "repair" operations. Not applicable for "delete" or "analyze".',
    example:
      'import React from "react";\n\nconst WelcomeMessage = () => <div>Hello, AI User!</div>;\n\nexport default WelcomeMessage;',
  })
  @IsString()
  @IsOptional()
  newContent?: string;

  @ApiPropertyOptional({
    description: 'A brief explanation or justification for this specific file change.',
    example: 'New component to display a welcome message.',
  })
  @IsString()
  @IsOptional()
  reason?: string;
}

/**
 * Represents the structured output received from the LLM.
 */
export class LlmOutputDto {
  @ApiProperty({
    description: 'A brief, high-level title for the overall changes or response.',
    example: 'Implement User Authentication Module',
  })
  @IsString()
  @IsDefined()
  title: string;

  @ApiProperty({
    description:
      'A concise summary provided by the LLM, describing the overall changes or solution.',
    example:
      'Implemented a new React component `WelcomeMessage.tsx` to display a greeting message.',
  })
  @IsString()
  @IsDefined()
  summary: string;

  @ApiPropertyOptional({
    description: "The LLM's detailed thought process or reasoning behind the proposed changes.",
    example:
      'The user requested a React component, so I created a functional component in TypeScript. I decided to place it in `src/components` for better organization and provided a simple "Hello" message as a starting point, anticipating future customization.',
  })
  @IsString()
  @IsOptional()
  thoughtProcess?: string;

  @ApiProperty({
    type: [ProposedFileChangeDto], // Specifies that this is an array of ProposedFileChangeDto
    description: 'A list of proposed file changes generated by the LLM.',
  })
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => ProposedFileChangeDto) // Important for class-transformer to instantiate nested DTOs
  @IsDefined()
  changes: ProposedFileChangeDto[];
}
