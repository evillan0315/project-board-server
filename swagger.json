{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_home",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Homepage rendered"
          }
        },
        "summary": "Redirect to setup if .env is missing",
        "tags": [
          "App"
        ]
      }
    },
    "/login": {
      "get": {
        "operationId": "AppController_getLogin",
        "parameters": [
          {
            "name": "error",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login page rendered"
          },
          "302": {
            "description": "Redirected if already logged in"
          }
        },
        "summary": "Render login page",
        "tags": [
          "App"
        ]
      }
    },
    "/editor": {
      "get": {
        "operationId": "AppController_getEditor",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Editor rendered"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Render protected editor page",
        "tags": [
          "App"
        ]
      }
    },
    "/logout": {
      "get": {
        "operationId": "AppController_getLogout",
        "parameters": [
          {
            "name": "error",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logout page rendered"
          },
          "302": {
            "description": "Redirected if already logged in"
          }
        },
        "summary": "Render logout page",
        "tags": [
          "App"
        ]
      },
      "post": {
        "operationId": "AppController_handleLogout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User logged out successfully and redirected"
          }
        },
        "summary": "Log out a user and clear JWT cookie",
        "tags": [
          "App"
        ]
      }
    },
    "/endpoints": {
      "get": {
        "operationId": "EndpointsController_getAllEndpoints",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all endpoints.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "summary": "List all registered API endpoints with Swagger info",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/endpoints/{controllerName}": {
      "get": {
        "description": "Retrieves all registered API endpoints associated with a given controller name (e.g., \"FileController\").",
        "operationId": "EndpointsController_getEndpointsByController",
        "parameters": [
          {
            "name": "controllerName",
            "required": true,
            "in": "path",
            "description": "The exact name of the controller (e.g., \"FileController\", \"RecordingController\"). Case-sensitive.",
            "schema": {
              "example": "FileController",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved endpoints for the specified controller.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No endpoints found for the specified controller name."
          }
        },
        "summary": "List endpoints for a specific controller",
        "tags": [
          "endpoints"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "User login",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Logged out successfully"
                  }
                }
              }
            }
          }
        },
        "summary": "Log out user (clear cookie)",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/github": {
      "get": {
        "operationId": "AuthController_githubAuth",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Redirects to GitHub login"
          }
        },
        "summary": "Initiate GitHub OAuth2 login",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/github/callback": {
      "get": {
        "operationId": "AuthController_githubAuthRedirect",
        "parameters": [
          {
            "name": "state",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cli_port",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GitHub login successful with JWT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Handle GitHub OAuth2 callback and issue JWT token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/google": {
      "get": {
        "operationId": "AuthController_googleAuth",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Redirects to Google login"
          }
        },
        "summary": "Initiate Google OAuth2 login",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/google/callback": {
      "get": {
        "operationId": "AuthController_googleAuthRedirect",
        "parameters": [
          {
            "name": "state",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Google login successful with JWT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Handle Google OAuth2 callback and issue JWT token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          }
        },
        "summary": "Register a new user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/resend-verification": {
      "post": {
        "operationId": "AuthController_resendVerification",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Resend email verification link",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/verify-email": {
      "get": {
        "operationId": "AuthController_verifyEmail",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "JWT token for email verification",
            "schema": {
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Email verified successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token"
          }
        },
        "summary": "Verify user email address",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/me": {
      "get": {
        "operationId": "AuthController_me",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current authenticated user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/user": {
      "post": {
        "operationId": "UserController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new User",
        "tags": [
          "User"
        ]
      },
      "get": {
        "operationId": "UserController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateUserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all users",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/paginated": {
      "get": {
        "operationId": "UserController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationUserResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve users with pagination",
        "tags": [
          "User"
        ]
      }
    },
    "/api/user/{id}": {
      "get": {
        "operationId": "UserController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve a user by ID",
        "tags": [
          "User"
        ]
      },
      "patch": {
        "operationId": "UserController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update a user by ID",
        "tags": [
          "User"
        ]
      },
      "delete": {
        "operationId": "UserController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "User not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete a user by ID",
        "tags": [
          "User"
        ]
      }
    },
    "/api/file/open": {
      "post": {
        "operationId": "FileController_openFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string",
                    "description": "Absolute or relative file path",
                    "example": "/path/to/file.txt"
                  }
                },
                "required": [
                  "filePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File opened successfully and content returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filePath": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "filePath is required."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "File not found."
          },
          "500": {
            "description": "Failed to open file."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Open a file and return its content",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/close": {
      "post": {
        "operationId": "FileController_closeFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string",
                    "description": "Path of the file to close",
                    "example": "/path/to/file.txt"
                  }
                },
                "required": [
                  "filePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File close acknowledged.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filePath": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "filePath is required."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Acknowledge file close request",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/list": {
      "get": {
        "operationId": "FileController_getFiles",
        "parameters": [
          {
            "name": "directory",
            "required": false,
            "in": "query",
            "description": "Path to the directory (defaults to current working directory)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "required": false,
            "in": "query",
            "description": "List files recursively (defaults to false)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of files and directories returned successfully"
          },
          "400": {
            "description": "Invalid directory path"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Failed to list directory contents"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "List files and folders in a directory",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/stream": {
      "get": {
        "operationId": "FileController_streamFile",
        "parameters": [
          {
            "name": "filePath",
            "required": true,
            "in": "query",
            "description": "The absolute or relative file path to stream",
            "schema": {
              "example": "/path/to/file.mp3",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Streams the media file",
            "content": {
              "video/mp4": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "audio/mpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "The filePath query parameter was missing or invalid"
          },
          "404": {
            "description": "The specified file does not exist or is not a file"
          },
          "500": {
            "description": "Failed to stream file due to a server error"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Stream media file with HTTP range support",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/download": {
      "get": {
        "operationId": "FileController_downloadFile",
        "parameters": [
          {
            "name": "filePath",
            "required": true,
            "in": "query",
            "description": "The absolute or relative file path to stream",
            "schema": {
              "example": "/path/to/your/file.mp3",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file was successfully streamed to the client",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "The filePath query parameter was missing or invalid"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "The specified file does not exist or is not a file"
          },
          "500": {
            "description": "Failed to stream file due to a server error"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Stream a file directly to the client",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/read": {
      "post": {
        "description": "Provides file content based on the input source. You can upload a file, specify a local file path, or provide a URL to a remote file.",
        "operationId": "FileController_readFileContent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Upload a file (optional if filePath or url is provided)"
                  },
                  "filePath": {
                    "type": "string",
                    "description": "Absolute or relative path to a file on the local file system"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL of a remote file to fetch content from"
                  },
                  "generateBlobUrl": {
                    "type": "boolean",
                    "description": "If true, returns content as a base64 blob-style data URL."
                  }
                },
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadFileResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Read file content from an uploaded file, local path, or URL",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/read-many": {
      "post": {
        "operationId": "FileController_readMultipleFiles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Multiple files to upload and read"
                  },
                  "generateBlobUrl": {
                    "type": "boolean",
                    "description": "If true, returns content as base64 blob-style data URLs."
                  }
                },
                "required": [
                  "files"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contents of multiple files returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadFileResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "No files uploaded or validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Upload and read content from multiple files",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/proxy": {
      "get": {
        "operationId": "FileController_proxy",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "The URL of the image to proxy",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image successfully proxied"
          },
          "400": {
            "description": "Missing or invalid image URL"
          },
          "500": {
            "description": "Error fetching or streaming image"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Proxies an image URL and streams the image content",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/create": {
      "post": {
        "operationId": "FileController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File or folder successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "filePath": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or path."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new file or folder",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/create-folder": {
      "post": {
        "operationId": "FileController_createFolder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Folder successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "filePath": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or path."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new folder",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/write": {
      "post": {
        "description": "Creates a new file or overwrites an existing one with the provided content. Parent directories will be created if they do not exist.",
        "operationId": "FileController_writeFileContent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string",
                    "description": "Absolute or relative file path",
                    "example": "/path/to/your/file.txt"
                  },
                  "content": {
                    "type": "string",
                    "description": "Text content to write into the file",
                    "example": "This is the content of the file."
                  }
                },
                "required": [
                  "filePath",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File written successfully."
          },
          "400": {
            "description": "Both filePath and content are required."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Failed to write file."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Write content to a file at a specified path",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/delete": {
      "post": {
        "operationId": "FileController_deleteFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filePath": {
                    "type": "string",
                    "description": "The path to the file or folder to delete.",
                    "example": "/path/to/file_or_folder.txt"
                  }
                },
                "required": [
                  "filePath"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully deleted the file or folder."
          },
          "400": {
            "description": "Path not found or invalid."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Failed to delete the file or folder."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete a file or folder",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/rename": {
      "post": {
        "operationId": "FileController_renameFileOrFolder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameFileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File or folder renamed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenameFileResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or target already exists."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Source path does not exist."
          },
          "500": {
            "description": "Failed to rename file or folder."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Rename a file or folder",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/search": {
      "post": {
        "operationId": "FileController_searchFiles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchFileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Matching files and folders returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchFileResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or directory not found."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Failed to complete search operation."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Search files and folders by name recursively",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/upload": {
      "post": {
        "operationId": "FileController_uploadFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload a single file",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/upload-multiple": {
      "post": {
        "operationId": "FileController_uploadMultipleFiles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Files uploaded successfully."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload multiple files",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/api/file/scan": {
      "post": {
        "description": "Recursively scans paths, reads content of relevant files, and returns their absolute path, relative path, and content. Uses internal exclusion lists for common development artifacts like node_modules.",
        "operationId": "FileController_scanFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanFileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of scanned files returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScannedFileDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Failed to perform project scan."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Scans specified directories and files for relevant code files",
        "tags": [
          "File & Folder"
        ]
      }
    },
    "/remote/list": {
      "get": {
        "description": "Connects via SSH/SFTP to the remote server and lists files and directories at the specified path, recursively.",
        "operationId": "RemoteFileController_list",
        "parameters": [
          {
            "name": "path",
            "required": false,
            "in": "query",
            "description": "Remote directory path to list (defaults to `/` if omitted)",
            "schema": {
              "example": "/var/www",
              "type": "string"
            }
          },
          {
            "name": "maxDepth",
            "required": false,
            "in": "query",
            "description": "Maximum recursion depth (default: unlimited)",
            "schema": {
              "example": 3,
              "type": "number"
            }
          },
          {
            "name": "maxFiles",
            "required": false,
            "in": "query",
            "description": "Maximum number of files to list (default: unlimited)",
            "schema": {
              "example": 100,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of files and directories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteFileListDto"
                }
              }
            }
          },
          "500": {
            "description": "SSH connection or SFTP operation failed"
          }
        },
        "summary": "List files and directories on remote server",
        "tags": [
          "Remote Files"
        ]
      }
    },
    "/remote/file": {
      "post": {
        "operationId": "RemoteFileController_createFile",
        "parameters": [
          {
            "name": "path",
            "required": true,
            "in": "query",
            "description": "Remote file path to create",
            "schema": {
              "example": "/var/www/newfile.txt",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Content to write to the file",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteFileContentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File created"
          }
        },
        "summary": "Create a new file on remote server",
        "tags": [
          "Remote Files"
        ]
      },
      "put": {
        "operationId": "RemoteFileController_updateFile",
        "parameters": [
          {
            "name": "path",
            "required": true,
            "in": "query",
            "description": "Remote file path to update",
            "schema": {
              "example": "/var/www/existingfile.txt",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "New content to overwrite the file",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoteFileContentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File updated"
          }
        },
        "summary": "Update an existing file on remote server",
        "tags": [
          "Remote Files"
        ]
      },
      "delete": {
        "operationId": "RemoteFileController_deleteFile",
        "parameters": [
          {
            "name": "path",
            "required": true,
            "in": "query",
            "description": "Remote file path to delete",
            "schema": {
              "example": "/var/www/deletethis.txt",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted"
          }
        },
        "summary": "Delete a file on remote server",
        "tags": [
          "Remote Files"
        ]
      }
    },
    "/remote/command": {
      "post": {
        "description": "Executes the specified shell command via SSH and returns its output.",
        "operationId": "RemoteFileController_runCommand",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The command to execute on the remote server",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command executed successfully",
            "schema": {
              "example": {
                "stdout": "total 12\ndrwxr-xr-x  3 root root 4096 Jun 25 12:00 .\ndrwxr-xr-x 20 root root 4096 Jun 25 12:00 ..\n-rw-r--r--  1 root root    0 Jun 25 12:00 index.html",
                "stderr": ""
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResultDto"
                }
              }
            }
          },
          "500": {
            "description": "SSH connection or command execution failed"
          }
        },
        "summary": "Run a shell command on the remote server",
        "tags": [
          "Remote Files"
        ]
      }
    },
    "/remote/download": {
      "get": {
        "operationId": "RemoteFileController_downloadFile",
        "parameters": [
          {
            "name": "remotePath",
            "required": true,
            "in": "query",
            "description": "Full remote file path to download",
            "schema": {
              "example": "/var/www/index.html",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the downloaded file"
          },
          "404": {
            "description": "File not found on remote server"
          },
          "500": {
            "description": "SSH or file operation failed"
          }
        },
        "summary": "Download a remote file",
        "tags": [
          "Remote Files"
        ]
      }
    },
    "/api/utils/json-fix": {
      "post": {
        "operationId": "UtilsController_fixJson",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixJsonDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the repaired JSON object"
          }
        },
        "summary": "Fix malformed or invalid JSON",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/get-directory": {
      "get": {
        "description": "Returns the directory part of the provided file path.",
        "operationId": "UtilsController_getDirectory",
        "parameters": [
          {
            "name": "filePath",
            "required": true,
            "in": "query",
            "description": "Absolute or relative file path to extract the directory from",
            "schema": {
              "example": "/home/eddie/projects/app/src/index.ts",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Directory extracted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "example": "/home/eddie/projects/app/src"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: filePath is missing or invalid."
          }
        },
        "summary": "Get directory from file path",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/parse-env-map": {
      "get": {
        "description": "Parses a semicolon-delimited key=value string into an object.",
        "operationId": "UtilsController_parseEnvMap",
        "parameters": [
          {
            "name": "mapString",
            "required": false,
            "in": "query",
            "description": "Semicolon-delimited key=value string to parse",
            "schema": {
              "example": "ts=typescript;js=javascript",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parsed key-value map",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "example": {
                    "ts": "typescript",
                    "js": "javascript"
                  }
                }
              }
            }
          }
        },
        "summary": "Parse ENV-style map string",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/format-code": {
      "post": {
        "operationId": "UtilsController_formatCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Formatted code returned as string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "function test() {\n  return 42;\n}"
                }
              }
            }
          }
        },
        "summary": "Format source code using Prettier",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/convert-to-svg": {
      "post": {
        "operationId": "UtilsController_uploadFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "color": {
                    "type": "string",
                    "example": "#000000",
                    "description": "Fill color of the SVG output"
                  },
                  "width": {
                    "type": "number",
                    "example": 512,
                    "description": "Resize width (pixels)"
                  },
                  "height": {
                    "type": "number",
                    "example": 512,
                    "description": "Resize height (pixels)"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Convert an image to SVG",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/json-to-env": {
      "post": {
        "description": "Converts a JSON object (from file upload or request body) into a .env string. Optionally allows direct download of the .env file.",
        "operationId": "UtilsController_jsonToEnv",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Optional: Upload a JSON file to convert."
                  },
                  "json": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "DB_HOST": "localhost",
                      "DB_USER": "admin"
                    },
                    "description": "Optional: Provide a JSON object directly in the request body."
                  },
                  "download": {
                    "type": "boolean",
                    "example": true,
                    "default": false,
                    "description": "If true, the .env file will be downloaded; otherwise, the content is returned as plain text."
                  }
                },
                "oneOf": [
                  {
                    "required": [
                      "file"
                    ]
                  },
                  {
                    "required": [
                      "json"
                    ]
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Optional: Upload a JSON file to convert."
                  },
                  "json": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "DB_HOST": "localhost",
                      "DB_USER": "admin"
                    },
                    "description": "Optional: Provide a JSON object directly in the request body."
                  },
                  "download": {
                    "type": "boolean",
                    "example": true,
                    "default": false,
                    "description": "If true, the .env file will be downloaded; otherwise, the content is returned as plain text."
                  }
                },
                "oneOf": [
                  {
                    "required": [
                      "file"
                    ]
                  },
                  {
                    "required": [
                      "json"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns .env as a file or raw string based on download option",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "DB_HOST=localhost\nDB_USER=admin"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "The .env file content if download is true."
                }
              }
            }
          }
        },
        "summary": "Upload JSON file or provide JSON body to convert to .env",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/env-to-json": {
      "post": {
        "description": "Parses a .env file from an upload or filepath and returns its contents as a JSON object.",
        "operationId": "UtilsController_envToJson",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Upload a .env file or provide a filepath (only one)",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadEnvDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully parsed .env file.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filepath": {
                      "type": "string",
                      "example": ".env.local"
                    },
                    "data": {
                      "type": "object",
                      "example": {
                        "DB_HOST": "localhost",
                        "DB_USER": "root"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Convert uploaded .env file or a filepath to JSON",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/extract-title": {
      "post": {
        "operationId": "UtilsController_extractTitle",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Title successfully extracted",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "title": "Hello World"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "summary": "Extracts the first H1 or H2 title from Markdown content",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/parse-select": {
      "post": {
        "description": "Parses a simple SELECT SQL string into a structured JSON object.",
        "operationId": "UtilsController_parseSelect",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sql": {
                    "type": "string",
                    "example": "SELECT id, name FROM users WHERE active = 1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Convert SELECT SQL to JSON",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/parse-insert": {
      "post": {
        "description": "Parses a simple INSERT SQL string into a structured JSON object.",
        "operationId": "UtilsController_parseInsert",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sql": {
                    "type": "string",
                    "example": "INSERT INTO users (id, name) VALUES (1, 'Alice')"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Convert INSERT SQL to JSON",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/json-to-insert": {
      "post": {
        "description": "Generates a simple INSERT SQL string from a JSON object.",
        "operationId": "UtilsController_jsonToSql",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "table": {
                    "type": "string",
                    "example": "users"
                  },
                  "data": {
                    "type": "object",
                    "example": {
                      "id": 1,
                      "name": "Alice"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Convert JSON to INSERT SQL",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/to-json": {
      "post": {
        "operationId": "UtilsController_convertToJson",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "markdown": {
                    "type": "string",
                    "example": "# Hello\n\nThis is **bold**."
                  }
                },
                "required": [
                  "markdown"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "MDAST JSON returned."
          }
        },
        "summary": "Convert Markdown to JSON AST",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/to-markdown": {
      "post": {
        "operationId": "UtilsController_convertToMarkdown",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ast": {
                    "type": "object",
                    "example": {
                      "type": "root",
                      "children": [
                        {
                          "type": "heading",
                          "depth": 1,
                          "children": [
                            {
                              "type": "text",
                              "value": "Hello"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "ast"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Markdown string returned."
          }
        },
        "summary": "Convert JSON AST to Markdown",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/to-html": {
      "post": {
        "operationId": "UtilsController_convertToHtml",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "markdown": {
                    "type": "string",
                    "example": "# Hello\n\nParagraph here."
                  }
                },
                "required": [
                  "markdown"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "HTML string returned."
          }
        },
        "summary": "Convert Markdown to HTML",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/strip-code-block": {
      "post": {
        "operationId": "UtilsController_stripCodeBlock",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "```typescript\nconst x = 42;\n```"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Code block without triple backticks returned."
          }
        },
        "summary": "Remove triple backticks from a code block",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/remove-code-comment": {
      "post": {
        "operationId": "UtilsController_removeCodeComment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "example": "/**\n * Adds two numbers\n */\nfunction add(a: number, b: number): number {\n  // Add them\n  return a + b;\n}"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Code block with all comments removed is returned."
          }
        },
        "summary": "Remove code comments from a code block (single-line and multi-line)",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/markdown-to-plain-text": {
      "post": {
        "operationId": "UtilsController_toPlainText",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Convert Markdown to plain text",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/markdown-to-docx": {
      "post": {
        "description": "Converts the provided Markdown string into a Microsoft Word DOCX file. Requires Pandoc to be installed on the server.",
        "operationId": "UtilsController_markdownToDocx",
        "parameters": [
          {
            "name": "filename",
            "required": false,
            "in": "query",
            "description": "Optional: Desired filename for the downloaded DOCX file (e.g., \"report\"). Default is \"document\".",
            "schema": {
              "example": "my_markdown_document",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkdownDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "DOCX file generated successfully.",
            "content": {
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid Markdown content or missing parameters."
          },
          "412": {
            "description": "Precondition Failed: Pandoc is not installed or not found in system PATH."
          },
          "500": {
            "description": "Internal Server Error: Failed to convert to DOCX."
          }
        },
        "summary": "Convert Markdown content to a DOCX document",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/html-to-docx": {
      "post": {
        "description": "Converts the provided HTML string into a Microsoft Word DOCX file. Requires Pandoc to be installed on the server.",
        "operationId": "UtilsController_htmlToDocx",
        "parameters": [
          {
            "name": "filename",
            "required": false,
            "in": "query",
            "description": "Optional: Desired filename for the downloaded DOCX file (e.g., \"webpage\"). Default is \"document\".",
            "schema": {
              "example": "my_html_document",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HtmlDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "DOCX file generated successfully.",
            "content": {
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid HTML content or missing parameters."
          },
          "412": {
            "description": "Precondition Failed: Pandoc is not installed or not found in system PATH."
          },
          "500": {
            "description": "Internal Server Error: Failed to convert to DOCX."
          }
        },
        "summary": "Convert HTML content to a DOCX document",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/encoding/base64/encode": {
      "post": {
        "operationId": "EncodingController_encodeToBase64",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Code string to encode",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "console.log(\"Hello\")"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Base64 encoded string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "encoded": {
                      "type": "string",
                      "example": "Y29uc29sZS5sb2goIkhlbGxvIik="
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Encode code to Base64",
        "tags": [
          "Encoding"
        ]
      }
    },
    "/api/encoding/base64/decode": {
      "post": {
        "operationId": "EncodingController_decodeFromBase64",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Base64 encoded string to decode",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "encoded": {
                    "type": "string",
                    "example": "Y29uc29sZS5sb2goIkhlbGxvIik="
                  }
                },
                "required": [
                  "encoded"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Decoded code string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "console.log(\"Hello\")"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Decode code from Base64",
        "tags": [
          "Encoding"
        ]
      }
    },
    "/api/encoding/url/encode": {
      "post": {
        "operationId": "EncodingController_encodeToURIComponent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Code string to URL encode",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "console.log(\"Hello\")"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "URL-encoded string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "encoded": {
                      "type": "string",
                      "example": "console.log%28%22Hello%22%29"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Encode code to URL-encoded format",
        "tags": [
          "Encoding"
        ]
      }
    },
    "/api/encoding/url/decode": {
      "post": {
        "operationId": "EncodingController_decodeFromURIComponent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "URL-encoded string to decode",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "encoded": {
                    "type": "string",
                    "example": "console.log%28%22Hello%22%29"
                  }
                },
                "required": [
                  "encoded"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Decoded code string",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "console.log(\"Hello\")"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Decode code from URL-encoded format",
        "tags": [
          "Encoding"
        ]
      }
    },
    "/api/docs/generate": {
      "get": {
        "operationId": "JsDocToMarkdownController_generateMarkdown",
        "parameters": [
          {
            "name": "filePath",
            "required": true,
            "in": "query",
            "description": "Path to the .ts or .tsx file",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Markdown documentation content as string."
          }
        },
        "summary": "Generate Markdown from JSDoc comments",
        "tags": [
          "JSDoc"
        ]
      }
    },
    "/api/docs/export": {
      "get": {
        "operationId": "JsDocToMarkdownController_exportMarkdown",
        "parameters": [
          {
            "name": "filePath",
            "required": true,
            "in": "query",
            "description": "Path to the source .ts or .tsx file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputPath",
            "required": true,
            "in": "query",
            "description": "Path where the Markdown file will be written",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully exported Markdown file"
          }
        },
        "summary": "Export Markdown documentation to a file",
        "tags": [
          "JSDoc"
        ]
      }
    },
    "/api/utils/json-yaml/to-yaml": {
      "post": {
        "description": "Converts a JSON object to YAML format. Optionally saves the result to a file if `save=true` is provided.",
        "operationId": "JsonYamlController_convertJsonToYaml",
        "parameters": [
          {
            "name": "save",
            "required": false,
            "in": "query",
            "description": "Whether to save the result to a file",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonToYamlDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Converted YAML output",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonToYamlResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Convert JSON to YAML",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/json-yaml/to-json": {
      "post": {
        "description": "Converts a YAML string to JSON format. Optionally saves the result to a file if `save=true` is provided.",
        "operationId": "JsonYamlController_convertYamlToJson",
        "parameters": [
          {
            "name": "save",
            "required": false,
            "in": "query",
            "description": "Whether to save the result to a file",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/YamlToJsonDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Converted JSON output",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YamlToJsonResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Convert YAML to JSON",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/json-yaml/upload-json": {
      "post": {
        "description": "Accepts a JSON file upload, converts its content to YAML, and optionally saves the output file.",
        "operationId": "JsonYamlController_uploadJson",
        "parameters": [
          {
            "name": "save",
            "required": false,
            "in": "query",
            "description": "Whether to save the result to a file",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filename",
            "required": false,
            "in": "query",
            "description": "Custom YAML filename (with .yaml)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Converted YAML output from uploaded JSON file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonToYamlResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Upload JSON file and convert to YAML",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/utils/json-yaml/upload-yaml": {
      "post": {
        "description": "Accepts a YAML file upload, converts its content to JSON, and optionally saves the output file.",
        "operationId": "JsonYamlController_uploadYaml",
        "parameters": [
          {
            "name": "save",
            "required": false,
            "in": "query",
            "description": "Whether to save the result to a file",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filename",
            "required": false,
            "in": "query",
            "description": "Custom JSON filename (with .json)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Converted JSON output from uploaded YAML file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YamlToJsonResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Upload YAML file and convert to JSON",
        "tags": [
          "Utilities"
        ]
      }
    },
    "/api/terminal/ssh/run": {
      "post": {
        "description": "Runs a single SSH command on a remote Linux server using either a password or private key authentication. Returns stdout or error output.",
        "operationId": "TerminalController_runSshCommand",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshCommandDto"
              },
              "examples": {
                "example1": {
                  "summary": "Run uptime via password authentication",
                  "value": {
                    "host": "192.168.1.10",
                    "port": 22,
                    "username": "ubuntu",
                    "password": "securepassword",
                    "command": "uptime"
                  }
                },
                "example2": {
                  "summary": "Run disk usage via private key authentication",
                  "value": {
                    "host": "example.com",
                    "port": 22,
                    "username": "ec2-user",
                    "privateKeyPath": "/home/user/.ssh/id_rsa",
                    "command": "df -h"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": "15:42:35 up 2 days,  3:12,  2 users,  load average: 0.15, 0.09, 0.10\n"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or SSH command failed",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "SSH command failed",
                    "details": "Permission denied (publickey,password)."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Execute SSH command on a remote server",
        "tags": [
          "Terminal"
        ]
      }
    },
    "/api/terminal/run": {
      "post": {
        "description": "Runs a local terminal command and returns stdout/stderr/exit code.",
        "operationId": "TerminalController_runCommand",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminalCommandDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "stdout": "example output",
                    "stderr": "",
                    "exitCode": 0
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or command failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Execute a terminal command locally",
        "tags": [
          "Terminal"
        ]
      }
    },
    "/api/folder": {
      "post": {
        "operationId": "FolderController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateFolderDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new Folder",
        "tags": [
          "Folder"
        ]
      },
      "get": {
        "operationId": "FolderController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Folder records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateFolderDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all Folder records",
        "tags": [
          "Folder"
        ]
      }
    },
    "/api/folder/paginated": {
      "get": {
        "operationId": "FolderController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": false,
            "in": "query",
            "description": "Filter by path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "required": false,
            "in": "query",
            "description": "Filter by parentId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationFolderResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated Folder records",
        "tags": [
          "Folder"
        ]
      }
    },
    "/api/folder/{id}": {
      "get": {
        "operationId": "FolderController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateFolderDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find Folder by ID",
        "tags": [
          "Folder"
        ]
      },
      "patch": {
        "operationId": "FolderController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFolderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateFolderDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update Folder by ID",
        "tags": [
          "Folder"
        ]
      },
      "delete": {
        "operationId": "FolderController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete Folder by ID",
        "tags": [
          "Folder"
        ]
      }
    },
    "/api/google-gemini/optimize-code": {
      "post": {
        "operationId": "GoogleGeminiController_optimizeCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptimizeCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Optimized code returned successfully"
          }
        },
        "summary": "Optimize the given code for performance or readability",
        "tags": [
          "Google Gemini"
        ]
      }
    },
    "/api/google-gemini/analyze-code": {
      "post": {
        "operationId": "GoogleGeminiController_analyzeCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code analysis returned successfully"
          }
        },
        "summary": "Analyze the given code for issues and improvements",
        "tags": [
          "Google Gemini"
        ]
      }
    },
    "/api/google-gemini/repair-code": {
      "post": {
        "operationId": "GoogleGeminiController_repairCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepairCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Repaired code returned successfully"
          }
        },
        "summary": "Repair syntax or logical errors in the given code",
        "tags": [
          "Google Gemini"
        ]
      }
    },
    "/api/google-gemini/generate-code": {
      "post": {
        "operationId": "GoogleGeminiController_generateCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "### React UI Component\n\n```tsx\nfunction UserProfileCard() { /* ... */ }\n```"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed"
          },
          "502": {
            "description": "Google Gemini API request failed"
          }
        },
        "summary": "Generate code using Google Gemini",
        "tags": [
          "Google Gemini"
        ]
      }
    },
    "/api/google-gemini/generate-doc": {
      "post": {
        "description": "Accepts a code snippet and optional parameters such as language, topic, isComment, and output format to generate documentation using Gemini.",
        "operationId": "GoogleGeminiController_generateCodeDocumentation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateDocDto"
              },
              "examples": {
                "example1": {
                  "summary": "JavaScript with inline comments",
                  "value": {
                    "codeSnippet": "function add(a, b) {\n  return a + b;\n}",
                    "language": "JavaScript",
                    "topic": "Math utilities",
                    "isComment": true,
                    "output": "markdown"
                  }
                },
                "example2": {
                  "summary": "TypeScript without comments, JSON output",
                  "value": {
                    "codeSnippet": "export class AuthService {\n  login(user: any) {\n    return user;\n  }\n}",
                    "language": "TypeScript",
                    "topic": "Authentication Service",
                    "isComment": false,
                    "output": "json"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated documentation based on the provided code snippet.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "markdown": "### Math utilities\n\n```js\n// Adds two numbers\nfunction add(a, b) {\n  return a + b;\n}\n```"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - Gemini API failure or invalid response."
          }
        },
        "summary": "Generate documentation from code snippet using Google Gemini",
        "tags": [
          "Google Gemini"
        ]
      }
    },
    "/api/google-gemini-image/caption": {
      "post": {
        "operationId": "GoogleGeminiImageController_captionImage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageCaptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Generate a caption for an image URL using Gemini",
        "tags": [
          "Google Gemini"
        ]
      }
    },
    "/api/google-gemini-image/caption-url": {
      "post": {
        "operationId": "GoogleGeminiImageController_captionFromUrl",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptionFromUrlDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Caption generated successfully"
          },
          "400": {
            "description": "Invalid image URL or request"
          },
          "502": {
            "description": "Failed to process image with Gemini"
          }
        },
        "summary": "Generate a caption for an image URL",
        "tags": [
          "Google Gemini"
        ]
      }
    },
    "/api/google-gemini-image/caption-file": {
      "post": {
        "operationId": "GoogleGeminiImageController_captionFromFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptionFromFileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Caption generated successfully"
          },
          "400": {
            "description": "Invalid file path or request"
          },
          "502": {
            "description": "Failed to process image with Gemini"
          }
        },
        "summary": "Generate a caption for a local image file",
        "tags": [
          "Google Gemini"
        ]
      }
    },
    "/api/google-tts/generate": {
      "post": {
        "operationId": "GoogleGeminiTtsController_generateAudio",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TtsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the generated WAV audio file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "summary": "Generate TTS audio with multiple speakers using Google Gemini",
        "tags": [
          "Google Gemini"
        ]
      }
    },
    "/api/gemini/file/generate-text": {
      "post": {
        "operationId": "GoogleGeminiFileController_generateText",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTextDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Generated text content.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Generate text from a simple text prompt.",
        "tags": [
          "Gemini AI"
        ]
      }
    },
    "/api/gemini/file/generate-image-base64": {
      "post": {
        "operationId": "GoogleGeminiFileController_generateTextWithBase64Image",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateImageBase64Dto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Generated text content based on the image and text prompt.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Generate text from a prompt with an embedded Base64 image.",
        "tags": [
          "Gemini AI"
        ]
      }
    },
    "/api/gemini/file/generate-file": {
      "post": {
        "operationId": "GoogleGeminiFileController_generateTextWithFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Prompt text and the file to be analyzed, with optional system instruction and conversation ID.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "prompt": {
                    "type": "string",
                    "description": "The text prompt for Gemini.",
                    "example": "Analyze this SQL schema and suggest improvements."
                  },
                  "systemInstruction": {
                    "type": "string",
                    "description": "Optional system instruction for the model.",
                    "example": "Act as a code reviewer."
                  },
                  "conversationId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Optional ID of an ongoing conversation.",
                    "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to attach (e.g., .sql, .txt, .csv)."
                  }
                },
                "required": [
                  "prompt",
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Generated text content based on the file and text prompt.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Generate text from a prompt with an uploaded file (e.g., .sql, .txt).",
        "tags": [
          "Gemini AI"
        ]
      }
    },
    "/api/conversations": {
      "get": {
        "operationId": "ConversationController_getConversations",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get conversations",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/conversations/{conversationId}/history": {
      "get": {
        "operationId": "ConversationController_getConversationHistory",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "description": "UUID of the conversation",
            "schema": {
              "example": "5c0f6e6c-d3d3-4b23-8c1c-d72c2e2851aa",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of conversation messages with roles and content.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConversationHistoryItemDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get conversation history by conversation ID",
        "tags": [
          "Conversations"
        ]
      }
    },
    "/api/schema": {
      "post": {
        "operationId": "SchemaController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchemaDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new Schema",
        "tags": [
          "Schema"
        ]
      },
      "get": {
        "operationId": "SchemaController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Schema records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateSchemaDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all Schema records",
        "tags": [
          "Schema"
        ]
      }
    },
    "/api/schema/paginated": {
      "get": {
        "operationId": "SchemaController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schema",
            "required": false,
            "in": "query",
            "description": "Filter by schema",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSchemaResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated Schema records",
        "tags": [
          "Schema"
        ]
      }
    },
    "/api/schema/{id}": {
      "get": {
        "operationId": "SchemaController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSchemaDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find Schema by ID",
        "tags": [
          "Schema"
        ]
      },
      "patch": {
        "operationId": "SchemaController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSchemaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSchemaDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update Schema by ID",
        "tags": [
          "Schema"
        ]
      },
      "delete": {
        "operationId": "SchemaController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete Schema by ID",
        "tags": [
          "Schema"
        ]
      }
    },
    "/api/log": {
      "post": {
        "operationId": "LogController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLogDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Log successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "abc123",
                    "type": "SYSTEM",
                    "level": "INFO",
                    "tags": [
                      "system"
                    ],
                    "data": {
                      "message": "System initialized"
                    },
                    "createdAt": "2025-06-19T12:00:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "403": {
            "description": "Log module is disabled"
          }
        },
        "summary": "Create a new log",
        "tags": [
          "Log"
        ]
      },
      "get": {
        "operationId": "LogController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of logs retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateLogDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Log module is disabled"
          }
        },
        "summary": "Retrieve all logs",
        "tags": [
          "Log"
        ]
      }
    },
    "/api/log/{id}": {
      "get": {
        "operationId": "LogController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLogDto"
                }
              }
            }
          },
          "403": {
            "description": "Log module is disabled"
          },
          "404": {
            "description": "Log not found."
          }
        },
        "summary": "Find log by ID",
        "tags": [
          "Log"
        ]
      },
      "patch": {
        "operationId": "LogController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLogDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLogDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data"
          },
          "403": {
            "description": "Log module is disabled"
          },
          "404": {
            "description": "Log not found."
          }
        },
        "summary": "Update log by ID",
        "tags": [
          "Log"
        ]
      },
      "delete": {
        "operationId": "LogController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log deleted successfully."
          },
          "403": {
            "description": "Log module is disabled"
          },
          "404": {
            "description": "Log not found."
          }
        },
        "summary": "Delete log by ID",
        "tags": [
          "Log"
        ]
      }
    },
    "/audio/extract": {
      "post": {
        "operationId": "AudioController_extract",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "example": "https://www.youtube.com/watch?v=xyz"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "mp3",
                      "webm",
                      "m4a",
                      "wav",
                      "mp4",
                      "flv"
                    ],
                    "default": "mp3"
                  },
                  "provider": {
                    "type": "string",
                    "example": "youtube",
                    "description": "Source provider such as youtube, vimeo, udemy, etc."
                  },
                  "cookieAccess": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to include authentication cookies for private content."
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the extracted audio/video file path.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filePath": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Extract audio/video from a URL",
        "tags": [
          "Audio"
        ]
      }
    },
    "/api/resume/parse": {
      "post": {
        "operationId": "ResumeController_parseResumeFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The resume file to parse (PDF or DOCX). Max 5MB."
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Text successfully extracted from the file.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "No file provided, unsupported file type, or file too large/corrupted."
          },
          "500": {
            "description": "Internal server error during file parsing."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Extract plain text content from a PDF or DOCX resume file",
        "tags": [
          "Resume"
        ]
      }
    },
    "/api/resume/optimize-from-file": {
      "post": {
        "operationId": "ResumeController_optimizeResumeFromFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "resumeFile": {
                    "type": "string",
                    "format": "binary",
                    "description": "The resume file (PDF or DOCX). Max 5MB. Provide this OR resumeContent.",
                    "nullable": true
                  },
                  "resumeContent": {
                    "type": "string",
                    "description": "The plain text content of the resume. Provide this OR resumeFile.",
                    "example": "Experienced developer with 10 years experience...",
                    "nullable": true
                  },
                  "jobDescription": {
                    "type": "string",
                    "description": "The text content of the job description.",
                    "example": "Experienced Full Stack Developer skilled in React and Node.js..."
                  },
                  "conversationId": {
                    "type": "string",
                    "description": "Optional: An existing conversation ID for continued interaction with the AI model.",
                    "example": "uuid-string-12345",
                    "nullable": true
                  }
                },
                "required": [
                  "jobDescription"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resume optimization results returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizationResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input (missing file/text/job description, unsupported file type, parsing error)."
          },
          "500": {
            "description": "Internal server error during processing or Gemini API call."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Parse a resume file/text and optimize it against a job description using Google Gemini",
        "tags": [
          "Resume"
        ]
      }
    },
    "/api/resume/generate-resume": {
      "post": {
        "operationId": "ResumeController_generateResume",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateResumeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resume generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing prompt."
          },
          "500": {
            "description": "Internal server error during Gemini API call."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate a new resume based on a detailed prompt using Google Gemini",
        "tags": [
          "Resume"
        ]
      }
    },
    "/api/resume/enhance-resume": {
      "post": {
        "operationId": "ResumeController_enhanceResume",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnhanceResumeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resume enhanced successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing resume content."
          },
          "500": {
            "description": "Internal server error during Gemini API call."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Enhance an existing resume or a specific section using Google Gemini",
        "tags": [
          "Resume"
        ]
      }
    },
    "/setup": {
      "get": {
        "operationId": "SetupController_setup",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Setup page rendered"
          }
        },
        "summary": "Render server setup page",
        "tags": [
          "Setup"
        ]
      },
      "post": {
        "operationId": "SetupController_generateEnv",
        "parameters": [],
        "responses": {
          "302": {
            "description": ".env file created or updated"
          }
        },
        "summary": "Generate or update .env file",
        "tags": [
          "Setup"
        ]
      }
    },
    "/api/aws/rds": {
      "get": {
        "operationId": "RdsController_listInstances",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a list of all PostgreSQL RDS instances"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "List all PostgreSQL RDS instances",
        "tags": [
          "AWS"
        ]
      },
      "post": {
        "operationId": "RdsController_createInstance",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "RDS instance creation parameters",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "dbInstanceIdentifier"
                ],
                "properties": {
                  "dbInstanceIdentifier": {
                    "type": "string",
                    "example": "my-postgres-db"
                  },
                  "dbInstanceClass": {
                    "type": "string",
                    "example": "db.t3.micro"
                  },
                  "allocatedStorage": {
                    "type": "number",
                    "example": 20
                  },
                  "masterUsername": {
                    "type": "string",
                    "example": "postgres"
                  },
                  "masterUserPassword": {
                    "type": "string",
                    "example": "StrongPassword123!"
                  },
                  "vpcSecurityGroupIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "sg-12345678"
                    ]
                  },
                  "dbSubnetGroupName": {
                    "type": "string",
                    "example": "my-db-subnet-group"
                  },
                  "availabilityZone": {
                    "type": "string",
                    "example": "us-east-1a"
                  },
                  "multiAZ": {
                    "type": "boolean",
                    "example": false
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Key": {
                          "type": "string"
                        },
                        "Value": {
                          "type": "string"
                        }
                      }
                    },
                    "example": [
                      {
                        "Key": "Environment",
                        "Value": "Production"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "RDS instance created successfully"
          },
          "400": {
            "description": "Invalid input parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new PostgreSQL RDS instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/rds/{id}": {
      "get": {
        "operationId": "RdsController_getInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RDS instance identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns details of the specified RDS instance"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "RDS instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get details of a specific RDS instance",
        "tags": [
          "AWS"
        ]
      },
      "delete": {
        "operationId": "RdsController_deleteInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RDS instance identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipFinalSnapshot",
            "required": false,
            "in": "query",
            "description": "Whether to skip taking a final snapshot",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "finalDBSnapshotIdentifier",
            "required": false,
            "in": "query",
            "description": "Name for the final snapshot",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RDS instance deletion initiated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "RDS instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete an RDS instance",
        "tags": [
          "AWS"
        ]
      },
      "put": {
        "operationId": "RdsController_modifyInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RDS instance identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "RDS instance modification parameters",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dbInstanceClass": {
                    "type": "string",
                    "example": "db.t3.small"
                  },
                  "allocatedStorage": {
                    "type": "number",
                    "example": 30
                  },
                  "masterUserPassword": {
                    "type": "string",
                    "example": "NewStrongPassword123!"
                  },
                  "backupRetentionPeriod": {
                    "type": "number",
                    "example": 14
                  },
                  "preferredBackupWindow": {
                    "type": "string",
                    "example": "03:00-04:00"
                  },
                  "preferredMaintenanceWindow": {
                    "type": "string",
                    "example": "sun:05:00-sun:06:00"
                  },
                  "multiAZ": {
                    "type": "boolean",
                    "example": true
                  },
                  "engineVersion": {
                    "type": "string",
                    "example": "13.7"
                  },
                  "allowMajorVersionUpgrade": {
                    "type": "boolean",
                    "example": false
                  },
                  "autoMinorVersionUpgrade": {
                    "type": "boolean",
                    "example": true
                  },
                  "applyImmediately": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RDS instance modified successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "RDS instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Modify an RDS instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/rds/{id}/stop": {
      "post": {
        "operationId": "RdsController_stopInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RDS instance identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RDS instance stopped successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "RDS instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Stop an RDS instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/rds/{id}/start": {
      "post": {
        "operationId": "RdsController_startInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RDS instance identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RDS instance started successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "RDS instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Start an RDS instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/rds/{id}/reboot": {
      "post": {
        "operationId": "RdsController_rebootInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "RDS instance identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceFailover",
            "required": false,
            "in": "query",
            "description": "Whether to force a failover during reboot",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RDS instance rebooted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "RDS instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Reboot an RDS instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/ec2": {
      "get": {
        "operationId": "Ec2Controller_listInstances",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of EC2 instances"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "List all EC2 instances",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/ec2/{id}": {
      "get": {
        "operationId": "Ec2Controller_getInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "EC2 instance ID",
            "schema": {
              "example": "i-0123456789abcdef0",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EC2 instance details"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get EC2 instance details",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/ec2/{id}/status": {
      "get": {
        "operationId": "Ec2Controller_getInstanceStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "EC2 instance ID",
            "schema": {
              "example": "i-0123456789abcdef0",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EC2 instance status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get EC2 instance status",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/ec2/start/{id}": {
      "post": {
        "operationId": "Ec2Controller_startInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "EC2 instance ID",
            "schema": {
              "example": "i-0123456789abcdef0",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Instance start initiated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Start an EC2 instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/ec2/stop/{id}": {
      "post": {
        "operationId": "Ec2Controller_stopInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "EC2 instance ID",
            "schema": {
              "example": "i-0123456789abcdef0",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Instance stop initiated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Stop an EC2 instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/ec2/terminate/{id}": {
      "post": {
        "operationId": "Ec2Controller_terminateInstance",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "EC2 instance ID",
            "schema": {
              "example": "i-0123456789abcdef0",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Instance termination initiated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Instance not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Terminate an EC2 instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/ec2/launch": {
      "post": {
        "operationId": "Ec2Controller_launchInstance",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchInstanceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Instance launched successfully"
          },
          "400": {
            "description": "Failed to launch instance"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Launch a new EC2 instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/ec2/{id}/tags": {
      "post": {
        "operationId": "Ec2Controller_addTags",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "EC2 instance ID",
            "schema": {
              "example": "i-0123456789abcdef0",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Tags to add to the instance",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "Name": "Production Server",
                  "Environment": "Production"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tags added successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Add tags to an EC2 instance",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/billing/cost-usage": {
      "get": {
        "operationId": "AwsBillingController_getCostAndUsage",
        "parameters": [
          {
            "name": "granularity",
            "required": false,
            "in": "query",
            "schema": {
              "example": "MONTHLY",
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "example": "2025-03-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "example": "2025-05-01",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cost and usage data was successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostAndUsageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Failed to retrieve cost and usage data."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get AWS Cost and Usage",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/billing/budgets": {
      "get": {
        "operationId": "AwsBillingController_getBudgetDetails",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The budget details were successfully retrieved."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "500": {
            "description": "Failed to retrieve budget details."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get AWS Budget details",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/dynamodb/store-command": {
      "post": {
        "operationId": "DynamodbController_storeCommand",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreCommandDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Command stored successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Store a command in DynamoDB",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/dynamodb/stored-commands": {
      "get": {
        "operationId": "DynamodbController_getStoredCommands",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Stored commands retrieved successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve stored commands from DynamoDB",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/dynamodb/create-table": {
      "post": {
        "operationId": "DynamodbController_createTable",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tableName": {
                    "type": "string"
                  },
                  "keySchema": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "attributeDefinitions": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "provisionedThroughput": {
                    "type": "object",
                    "properties": {
                      "ReadCapacityUnits": {
                        "type": "number"
                      },
                      "WriteCapacityUnits": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Table created successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new DynamoDB table",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/dynamodb/list-tables": {
      "get": {
        "operationId": "DynamodbController_listTables",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved table names"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "List all DynamoDB tables",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/dynamodb/list-data/{tableName}": {
      "get": {
        "operationId": "DynamodbController_listTableData",
        "parameters": [
          {
            "name": "tableName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "List all stored data for a specific table",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/security-group": {
      "get": {
        "operationId": "AwsSecurityGroupController_listAll",
        "parameters": [
          {
            "name": "nextToken",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of security groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityGroupDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "List EC2 Security Groups (with tags, rules, pagination)",
        "tags": [
          "AWS"
        ]
      },
      "post": {
        "operationId": "AwsSecurityGroupController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecurityGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Security group created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new Security Group",
        "tags": [
          "AWS"
        ]
      },
      "put": {
        "operationId": "AwsSecurityGroupController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSecurityGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security group updated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update tags of a Security Group",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/security-group/{groupId}": {
      "get": {
        "operationId": "AwsSecurityGroupController_describeById",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security group details"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Describe a specific security group by ID",
        "tags": [
          "AWS"
        ]
      },
      "delete": {
        "operationId": "AwsSecurityGroupController_delete",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security group deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete a Security Group",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/security-group/add-rule": {
      "post": {
        "operationId": "AwsSecurityGroupController_addRule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageIngressEgressDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rule added successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Add ingress or egress rule to a security group",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/aws/security-group/revoke-rule": {
      "post": {
        "operationId": "AwsSecurityGroupController_revokeRule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageIngressEgressDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rule revoked successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Revoke ingress or egress rule from a security group",
        "tags": [
          "AWS"
        ]
      }
    },
    "/api/transpile": {
      "post": {
        "operationId": "TranspilerController_transpile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranspilerRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranspilerResponseDto"
                }
              }
            }
          }
        },
        "summary": "Transpile raw code string.",
        "tags": [
          "Transpiler"
        ]
      }
    },
    "/api/transpile/file": {
      "post": {
        "operationId": "TranspilerController_transpileFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "options": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully transpiled uploaded file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranspilerResponseDto"
                }
              }
            }
          }
        },
        "summary": "Transpile an uploaded file (React, SolidJS, TS).",
        "tags": [
          "Transpiler"
        ]
      }
    },
    "/api/transpile/files": {
      "post": {
        "operationId": "TranspilerController_transpileFiles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "options": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully transpiled uploaded files.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "filename": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Transpile multiple uploaded files.",
        "tags": [
          "Transpiler"
        ]
      }
    },
    "/api/transpile/directory": {
      "post": {
        "operationId": "TranspilerController_transpileDirectory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "archive": {
                    "type": "string",
                    "format": "binary"
                  },
                  "options": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully transpiled files from the directory archive.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "filename": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Transpile all valid files inside a ZIP archive (directory).",
        "tags": [
          "Transpiler"
        ]
      }
    },
    "/feature/status/{moduleName}": {
      "get": {
        "operationId": "FeatureController_getModuleStatus",
        "parameters": [
          {
            "name": "moduleName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feature"
        ]
      }
    },
    "/feature/enable/{moduleName}": {
      "get": {
        "operationId": "FeatureController_enableModule",
        "parameters": [
          {
            "name": "moduleName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feature"
        ]
      }
    },
    "/feature/disable/{moduleName}": {
      "get": {
        "operationId": "FeatureController_disableModule",
        "parameters": [
          {
            "name": "moduleName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feature"
        ]
      }
    },
    "/feature/toggle/{moduleName}": {
      "get": {
        "operationId": "FeatureController_toggleModule",
        "parameters": [
          {
            "name": "moduleName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feature"
        ]
      }
    },
    "/feature/all-statuses": {
      "get": {
        "operationId": "FeatureController_getAllStatuses",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feature"
        ]
      }
    },
    "/api/gemini-request": {
      "post": {
        "operationId": "GeminiRequestController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGeminiRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGeminiRequestDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new GeminiRequest",
        "tags": [
          "GeminiRequest"
        ]
      },
      "get": {
        "operationId": "GeminiRequestController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of GeminiRequest records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateGeminiRequestDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all GeminiRequest records",
        "tags": [
          "GeminiRequest"
        ]
      }
    },
    "/api/gemini-request/paginated": {
      "get": {
        "operationId": "GeminiRequestController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by userId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conversationId",
            "required": false,
            "in": "query",
            "description": "Filter by conversationId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelUsed",
            "required": false,
            "in": "query",
            "description": "Filter by modelUsed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prompt",
            "required": false,
            "in": "query",
            "description": "Filter by prompt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemInstruction",
            "required": false,
            "in": "query",
            "description": "Filter by systemInstruction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageUrl",
            "required": false,
            "in": "query",
            "description": "Filter by imageUrl",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageData",
            "required": false,
            "in": "query",
            "description": "Filter by imageData",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileMimeType",
            "required": false,
            "in": "query",
            "description": "Filter by fileMimeType",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileData",
            "required": false,
            "in": "query",
            "description": "Filter by fileData",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationGeminiRequestResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated GeminiRequest records",
        "tags": [
          "GeminiRequest"
        ]
      }
    },
    "/api/gemini-request/{id}": {
      "get": {
        "operationId": "GeminiRequestController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGeminiRequestDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find GeminiRequest by ID",
        "tags": [
          "GeminiRequest"
        ]
      },
      "patch": {
        "operationId": "GeminiRequestController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGeminiRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateGeminiRequestDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update GeminiRequest by ID",
        "tags": [
          "GeminiRequest"
        ]
      },
      "delete": {
        "operationId": "GeminiRequestController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete GeminiRequest by ID",
        "tags": [
          "GeminiRequest"
        ]
      }
    },
    "/api/gemini-response": {
      "post": {
        "operationId": "GeminiResponseController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGeminiResponseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGeminiResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new GeminiResponse",
        "tags": [
          "GeminiResponse"
        ]
      },
      "get": {
        "operationId": "GeminiResponseController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of GeminiResponse records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateGeminiResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all GeminiResponse records",
        "tags": [
          "GeminiResponse"
        ]
      }
    },
    "/api/gemini-response/paginated": {
      "get": {
        "operationId": "GeminiResponseController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "requestId",
            "required": false,
            "in": "query",
            "description": "Filter by requestId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseText",
            "required": false,
            "in": "query",
            "description": "Filter by responseText",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "finishReason",
            "required": false,
            "in": "query",
            "description": "Filter by finishReason",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "safetyRatings",
            "required": false,
            "in": "query",
            "description": "Filter by safetyRatings",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          },
          {
            "name": "tokenCount",
            "required": false,
            "in": "query",
            "description": "Filter by tokenCount",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationGeminiResponseResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated GeminiResponse records",
        "tags": [
          "GeminiResponse"
        ]
      }
    },
    "/api/gemini-response/{id}": {
      "get": {
        "operationId": "GeminiResponseController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGeminiResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find GeminiResponse by ID",
        "tags": [
          "GeminiResponse"
        ]
      },
      "patch": {
        "operationId": "GeminiResponseController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGeminiResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateGeminiResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update GeminiResponse by ID",
        "tags": [
          "GeminiResponse"
        ]
      },
      "delete": {
        "operationId": "GeminiResponseController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete GeminiResponse by ID",
        "tags": [
          "GeminiResponse"
        ]
      }
    },
    "/api/recording/status": {
      "get": {
        "operationId": "RecordingController_recordingStatus",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Recording ID to check",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current recording status.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "recording": true,
                    "file": "/path/to/file.mp4",
                    "startedAt": "2025-06-21T06:00:00.000Z",
                    "id": "some-uuid-id-of-recording"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current recording status.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/recording/metadata": {
      "get": {
        "operationId": "RecordingController_getMetadata",
        "parameters": [
          {
            "name": "file",
            "required": true,
            "in": "query",
            "description": "Full path or filename",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get metadata for a recording file.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/recording/list": {
      "get": {
        "operationId": "RecordingController_listRecordings",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List all saved recording files on disk.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/recording/recordings/cleanup": {
      "delete": {
        "operationId": "RecordingController_cleanupOld",
        "parameters": [
          {
            "name": "days",
            "required": false,
            "in": "query",
            "schema": {
              "example": 7,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete recordings older than N days.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/recording/capture": {
      "post": {
        "operationId": "RecordingController_capture",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Screen captured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopRecordingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Take a screenshot of the current screen.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/recording/record-start": {
      "post": {
        "operationId": "RecordingController_start",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Recording started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartRecordingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Start screen recording.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/recording/record-stop": {
      "post": {
        "operationId": "RecordingController_stop",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "query",
            "description": "Recording ID to stop",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recording stopped successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopRecordingResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Stop screen recording.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/recording": {
      "post": {
        "operationId": "RecordingController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecordingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRecordingDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new recording entry.",
        "tags": [
          "Recording"
        ]
      },
      "get": {
        "operationId": "RecordingController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of recordings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateRecordingDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all recordings.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/recording/paginated": {
      "get": {
        "operationId": "RecordingController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Optional filter by status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pid",
            "required": false,
            "in": "query",
            "description": "Optional filter by process ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Optional filter by type (e.g., audio, video)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdById",
            "required": false,
            "in": "query",
            "description": "Optional filter by createdById",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationRecordingResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated recordings.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/recording/{id}": {
      "get": {
        "operationId": "RecordingController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRecordingDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find recording by ID.",
        "tags": [
          "Recording"
        ]
      },
      "patch": {
        "operationId": "RecordingController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecordingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRecordingDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update recording by ID.",
        "tags": [
          "Recording"
        ]
      },
      "delete": {
        "operationId": "RecordingController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete recording by ID.",
        "tags": [
          "Recording"
        ]
      }
    },
    "/api/account": {
      "post": {
        "operationId": "AccountController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccountDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new Account",
        "tags": [
          "Account"
        ]
      },
      "get": {
        "operationId": "AccountController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Account records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateAccountDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all Account records",
        "tags": [
          "Account"
        ]
      }
    },
    "/api/account/paginated": {
      "get": {
        "operationId": "AccountController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Filter by provider",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "providerAccountId",
            "required": false,
            "in": "query",
            "description": "Filter by providerAccountId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refresh_token",
            "required": false,
            "in": "query",
            "description": "Filter by refresh_token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "access_token",
            "required": false,
            "in": "query",
            "description": "Filter by access_token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expires_at",
            "required": false,
            "in": "query",
            "description": "Filter by expires_at",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "token_type",
            "required": false,
            "in": "query",
            "description": "Filter by token_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "required": false,
            "in": "query",
            "description": "Filter by scope",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id_token",
            "required": false,
            "in": "query",
            "description": "Filter by id_token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session_state",
            "required": false,
            "in": "query",
            "description": "Filter by session_state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationAccountResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated Account records",
        "tags": [
          "Account"
        ]
      }
    },
    "/api/account/{id}": {
      "get": {
        "operationId": "AccountController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccountDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find Account by ID",
        "tags": [
          "Account"
        ]
      },
      "patch": {
        "operationId": "AccountController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAccountDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update Account by ID",
        "tags": [
          "Account"
        ]
      },
      "delete": {
        "operationId": "AccountController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete Account by ID",
        "tags": [
          "Account"
        ]
      }
    },
    "/api/organization": {
      "post": {
        "operationId": "OrganizationController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new Organization",
        "tags": [
          "Organization"
        ]
      },
      "get": {
        "operationId": "OrganizationController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Organization records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateOrganizationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all Organization records",
        "tags": [
          "Organization"
        ]
      }
    },
    "/api/organization/paginated": {
      "get": {
        "operationId": "OrganizationController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOrganizationResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated Organization records",
        "tags": [
          "Organization"
        ]
      }
    },
    "/api/organization/{id}": {
      "get": {
        "operationId": "OrganizationController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find Organization by ID",
        "tags": [
          "Organization"
        ]
      },
      "patch": {
        "operationId": "OrganizationController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrganizationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update Organization by ID",
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "operationId": "OrganizationController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete Organization by ID",
        "tags": [
          "Organization"
        ]
      }
    },
    "/api/project": {
      "post": {
        "operationId": "ProjectController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new Project",
        "tags": [
          "Project"
        ]
      },
      "get": {
        "operationId": "ProjectController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Project records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateProjectDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all Project records",
        "tags": [
          "Project"
        ]
      }
    },
    "/api/project/paginated": {
      "get": {
        "operationId": "ProjectController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "in": "query",
            "description": "Filter by description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": false,
            "in": "query",
            "description": "Filter by path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "technologies",
            "required": false,
            "in": "query",
            "description": "Filter by technologies",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "versionControl",
            "required": false,
            "in": "query",
            "description": "Filter by versionControl",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repositoryUrl",
            "required": false,
            "in": "query",
            "description": "Filter by repositoryUrl",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastOpenedAt",
            "required": false,
            "in": "query",
            "description": "Filter by lastOpenedAt",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "ownerId",
            "required": false,
            "in": "query",
            "description": "Filter by ownerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata",
            "required": false,
            "in": "query",
            "description": "Filter by metadata",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationProjectResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated Project records",
        "tags": [
          "Project"
        ]
      }
    },
    "/api/project/{id}": {
      "get": {
        "operationId": "ProjectController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProjectDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find Project by ID",
        "tags": [
          "Project"
        ]
      },
      "patch": {
        "operationId": "ProjectController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProjectDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update Project by ID",
        "tags": [
          "Project"
        ]
      },
      "delete": {
        "operationId": "ProjectController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete Project by ID",
        "tags": [
          "Project"
        ]
      }
    },
    "/api/schema-submission": {
      "post": {
        "operationId": "SchemaSubmissionController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchemaSubmissionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSchemaSubmissionDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new SchemaSubmission",
        "tags": [
          "SchemaSubmission"
        ]
      },
      "get": {
        "operationId": "SchemaSubmissionController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of SchemaSubmission records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateSchemaSubmissionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all SchemaSubmission records",
        "tags": [
          "SchemaSubmission"
        ]
      }
    },
    "/api/schema-submission/paginated": {
      "get": {
        "operationId": "SchemaSubmissionController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "schemaName",
            "required": false,
            "in": "query",
            "description": "Filter by schemaName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submittedById",
            "required": false,
            "in": "query",
            "description": "Filter by submittedById",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "required": false,
            "in": "query",
            "description": "Filter by data",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          },
          {
            "name": "schemaId",
            "required": false,
            "in": "query",
            "description": "Filter by schemaId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSchemaSubmissionResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated SchemaSubmission records",
        "tags": [
          "SchemaSubmission"
        ]
      }
    },
    "/api/schema-submission/by-schema-user": {
      "get": {
        "operationId": "SchemaSubmissionController_findBySchemaAndUser",
        "parameters": [
          {
            "name": "schemaId",
            "required": true,
            "in": "query",
            "description": "Schema ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submittedById",
            "required": true,
            "in": "query",
            "description": "User ID who submitted",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Matching submissions found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateSchemaSubmissionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid parameters."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Get submissions by schemaId and submittedById",
        "tags": [
          "SchemaSubmission"
        ]
      }
    },
    "/api/schema-submission/{id}": {
      "get": {
        "operationId": "SchemaSubmissionController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSchemaSubmissionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find SchemaSubmission by ID",
        "tags": [
          "SchemaSubmission"
        ]
      },
      "patch": {
        "operationId": "SchemaSubmissionController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSchemaSubmissionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSchemaSubmissionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update SchemaSubmission by ID",
        "tags": [
          "SchemaSubmission"
        ]
      },
      "delete": {
        "operationId": "SchemaSubmissionController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete SchemaSubmission by ID",
        "tags": [
          "SchemaSubmission"
        ]
      }
    },
    "/api/icon/download/prefix": {
      "post": {
        "operationId": "IconController_downloadByPrefix",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Prefix name to download all icons for",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "prefix"
                ],
                "properties": {
                  "prefix": {
                    "type": "string",
                    "example": "mdi",
                    "description": "Icon set prefix (e.g., mdi, tabler, carbon)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Icons downloaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "mdi:home"
                      },
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "path": {
                        "type": "string",
                        "example": "/icons/mdi/home.svg"
                      },
                      "error": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Prefix is required"
          }
        },
        "summary": "Download all icons for a given prefix from Iconify",
        "tags": [
          "Icons"
        ]
      }
    },
    "/api/icon/download": {
      "get": {
        "operationId": "IconController_download",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Download icons from Iconify and store locally",
        "tags": [
          "Icons"
        ]
      }
    },
    "/api/icon/list": {
      "get": {
        "operationId": "IconController_list",
        "parameters": [
          {
            "name": "prefix",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "prefix",
                "name"
              ],
              "type": "string"
            }
          },
          {
            "name": "order",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "List downloaded icons with pagination and sorting",
        "tags": [
          "Icons"
        ]
      }
    },
    "/api/icon/{prefix}/{name}": {
      "get": {
        "operationId": "IconController_getIcon",
        "parameters": [
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "description": "Icon prefix (e.g. mdi)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "description": "Icon name (e.g. home)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get individual icon SVG content",
        "tags": [
          "Icons"
        ]
      }
    },
    "/api/code-extractor/extract": {
      "post": {
        "operationId": "CodeExtractorController_extract",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractCodeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Code files extracted successfully."
          },
          "400": {
            "description": "Invalid input file path."
          }
        },
        "summary": "Extract code blocks from markdown file",
        "tags": [
          "Code Extraction"
        ]
      }
    },
    "/repos": {
      "post": {
        "operationId": "ReposController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Repository successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new GitHub repository",
        "tags": [
          "Repositories (Authenticated User)"
        ]
      },
      "get": {
        "operationId": "ReposController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all repositories for authenticated user",
        "tags": [
          "Repositories (Authenticated User)"
        ]
      }
    },
    "/repos/{repoName}/commit": {
      "patch": {
        "operationId": "ReposController_commit",
        "parameters": [
          {
            "name": "repoName",
            "required": true,
            "in": "path",
            "schema": {
              "example": "oauth-repo-test",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRepoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Commit to a GitHub repository (dummy file)",
        "tags": [
          "Repositories (Authenticated User)"
        ]
      }
    },
    "/repos/{repoName}": {
      "delete": {
        "operationId": "ReposController_remove",
        "parameters": [
          {
            "name": "repoName",
            "required": true,
            "in": "path",
            "schema": {
              "example": "oauth-repo-test",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a GitHub repository",
        "tags": [
          "Repositories (Authenticated User)"
        ]
      },
      "get": {
        "operationId": "ReposController_findOne",
        "parameters": [
          {
            "name": "repoName",
            "required": true,
            "in": "path",
            "schema": {
              "example": "github-oauth-manager",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a repository by name",
        "tags": [
          "Repositories (Authenticated User)"
        ]
      }
    },
    "/repos/{repoName}/contents": {
      "get": {
        "operationId": "ReposController_getRepoContents",
        "parameters": [
          {
            "name": "repoName",
            "required": true,
            "in": "path",
            "schema": {
              "example": "your-repo-name",
              "type": "string"
            }
          },
          {
            "name": "path",
            "required": false,
            "in": "query",
            "description": "The content path. For example: `src/main.ts` or `docs`. If omitted, the root directory contents are returned.",
            "schema": {
              "example": "src/config",
              "type": "string"
            }
          },
          {
            "name": "ref",
            "required": false,
            "in": "query",
            "description": "The name of the commit, branch, or tag. Default: the repository’s default branch (usually `main` or `master`).",
            "schema": {
              "example": "my-feature-branch",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoContentDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get repository files & directory contents",
        "tags": [
          "Repositories (Authenticated User)"
        ]
      }
    },
    "/api/system-instruction": {
      "post": {
        "operationId": "SystemInstructionController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSystemInstructionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSystemInstructionDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new SystemInstruction",
        "tags": [
          "SystemInstruction"
        ]
      },
      "get": {
        "operationId": "SystemInstructionController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of SystemInstruction records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateSystemInstructionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all SystemInstruction records",
        "tags": [
          "SystemInstruction"
        ]
      }
    },
    "/api/system-instruction/paginated": {
      "get": {
        "operationId": "SystemInstructionController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "requestId",
            "required": false,
            "in": "query",
            "description": "Filter by requestId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instruction",
            "required": false,
            "in": "query",
            "description": "Filter by instruction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "persona",
            "required": false,
            "in": "query",
            "description": "Filter by persona",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationSystemInstructionResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated SystemInstruction records",
        "tags": [
          "SystemInstruction"
        ]
      }
    },
    "/api/system-instruction/{id}": {
      "get": {
        "operationId": "SystemInstructionController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSystemInstructionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find SystemInstruction by ID",
        "tags": [
          "SystemInstruction"
        ]
      },
      "patch": {
        "operationId": "SystemInstructionController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemInstructionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSystemInstructionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update SystemInstruction by ID",
        "tags": [
          "SystemInstruction"
        ]
      },
      "delete": {
        "operationId": "SystemInstructionController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete SystemInstruction by ID",
        "tags": [
          "SystemInstruction"
        ]
      }
    },
    "/api/eslint/lint": {
      "post": {
        "operationId": "EslintController_lintCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Code content and optional file context for linting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LintCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns ESLint diagnostics (warnings/errors).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiagnosticDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "ESLint service error"
          }
        },
        "summary": "Lint a given code string using ESLint",
        "tags": [
          "eslint"
        ]
      }
    },
    "/api/eslint/lint-files": {
      "post": {
        "operationId": "EslintController_lintFiles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "An array of code contents with their virtual file paths for linting",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LintFilesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns ESLint diagnostics grouped by file path.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DiagnosticDto"
                    }
                  },
                  "example": {
                    "/path/to/file1.ts": [],
                    "/path/to/file2.ts": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "ESLint service error"
          }
        },
        "summary": "Lint multiple given code strings (representing files) using ESLint",
        "tags": [
          "eslint"
        ]
      }
    },
    "/api/eslint/lint-directory": {
      "post": {
        "operationId": "EslintController_lintDirectory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Path to the directory to lint and optional CWD.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LintDirectoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns ESLint diagnostics grouped by file path.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DiagnosticDto"
                    }
                  },
                  "example": {
                    "/path/to/file1.ts": [],
                    "/path/to/file2.ts": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "ESLint service error"
          }
        },
        "summary": "Lint all files within a specified directory using ESLint",
        "tags": [
          "eslint"
        ]
      }
    },
    "/api/llm/generate-llm": {
      "post": {
        "operationId": "LlmController_generateContent",
        "parameters": [
          {
            "name": "projectRoot",
            "required": true,
            "in": "query",
            "description": "Absolute path to the project root directory. Files will be scanned and proposed changes will be relative to this root.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LlmInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LlmOutputDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate code and file changes using the LLM",
        "tags": [
          "LLM Operations"
        ]
      }
    },
    "/api/llm/project-structure": {
      "get": {
        "operationId": "LlmController_getProjectStructure",
        "parameters": [
          {
            "name": "projectRoot",
            "required": true,
            "in": "query",
            "description": "Absolute path to the project root directory",
            "schema": {
              "example": "/home/user/my-react-app",
              "type": "string"
            }
          },
          {
            "name": "ignorePatterns",
            "required": false,
            "in": "query",
            "description": "Comma-separated list of directories/files to ignore (default: node_modules,.git,dist,build)",
            "schema": {
              "example": "node_modules,.git,dist",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project structure successfully generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Project Structure (root: my-app)\n- src\n  - main.ts\n  - app.module.ts\n- package.json\n- tsconfig.json"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate the project structure (directory tree)",
        "tags": [
          "LLM Operations"
        ]
      }
    },
    "/api/terminal-session": {
      "post": {
        "operationId": "TerminalSessionController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTerminalSessionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTerminalSessionDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new TerminalSession",
        "tags": [
          "TerminalSession"
        ]
      },
      "get": {
        "operationId": "TerminalSessionController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of TerminalSession records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateTerminalSessionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all TerminalSession records",
        "tags": [
          "TerminalSession"
        ]
      }
    },
    "/api/terminal-session/paginated": {
      "get": {
        "operationId": "TerminalSessionController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startedAt",
            "required": false,
            "in": "query",
            "description": "Filter by startedAt",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "endedAt",
            "required": false,
            "in": "query",
            "description": "Filter by endedAt",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "ipAddress",
            "required": false,
            "in": "query",
            "description": "Filter by ipAddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userAgent",
            "required": false,
            "in": "query",
            "description": "Filter by userAgent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientInfo",
            "required": false,
            "in": "query",
            "description": "Filter by clientInfo",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationTerminalSessionResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated TerminalSession records",
        "tags": [
          "TerminalSession"
        ]
      }
    },
    "/api/terminal-session/{id}": {
      "get": {
        "operationId": "TerminalSessionController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTerminalSessionDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find TerminalSession by ID",
        "tags": [
          "TerminalSession"
        ]
      },
      "patch": {
        "operationId": "TerminalSessionController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTerminalSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTerminalSessionDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update TerminalSession by ID",
        "tags": [
          "TerminalSession"
        ]
      },
      "delete": {
        "operationId": "TerminalSessionController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete TerminalSession by ID",
        "tags": [
          "TerminalSession"
        ]
      }
    },
    "/api/terminal-command": {
      "post": {
        "operationId": "TerminalCommandController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTerminalCommandDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTerminalCommandDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new TerminalCommand",
        "tags": [
          "TerminalCommand"
        ]
      },
      "get": {
        "operationId": "TerminalCommandController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of TerminalCommand records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateTerminalCommandDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all TerminalCommand records",
        "tags": [
          "TerminalCommand"
        ]
      }
    },
    "/api/terminal-command/paginated": {
      "get": {
        "operationId": "TerminalCommandController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "command",
            "required": false,
            "in": "query",
            "description": "Filter by command",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "in": "query",
            "description": "Filter by description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "output",
            "required": false,
            "in": "query",
            "description": "Filter by output",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Filter by tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "isFavorite",
            "required": false,
            "in": "query",
            "description": "Filter by isFavorite",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationTerminalCommandResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated TerminalCommand records",
        "tags": [
          "TerminalCommand"
        ]
      }
    },
    "/api/terminal-command/{id}": {
      "get": {
        "operationId": "TerminalCommandController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTerminalCommandDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find TerminalCommand by ID",
        "tags": [
          "TerminalCommand"
        ]
      },
      "patch": {
        "operationId": "TerminalCommandController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTerminalCommandDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTerminalCommandDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update TerminalCommand by ID",
        "tags": [
          "TerminalCommand"
        ]
      },
      "delete": {
        "operationId": "TerminalCommandController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete TerminalCommand by ID",
        "tags": [
          "TerminalCommand"
        ]
      }
    },
    "/api/command-history": {
      "post": {
        "operationId": "CommandHistoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommandHistoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommandHistoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new CommandHistory",
        "tags": [
          "CommandHistory"
        ]
      },
      "get": {
        "operationId": "CommandHistoryController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of CommandHistory records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateCommandHistoryDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all CommandHistory records",
        "tags": [
          "CommandHistory"
        ]
      }
    },
    "/api/command-history/paginated": {
      "get": {
        "operationId": "CommandHistoryController_findAllPaginated",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "command",
            "required": false,
            "in": "query",
            "description": "Filter by command",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "executedAt",
            "required": false,
            "in": "query",
            "description": "Filter by executedAt",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exitCode",
            "required": false,
            "in": "query",
            "description": "Filter by exitCode",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "output",
            "required": false,
            "in": "query",
            "description": "Filter by output",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "errorOutput",
            "required": false,
            "in": "query",
            "description": "Filter by errorOutput",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workingDirectory",
            "required": false,
            "in": "query",
            "description": "Filter by workingDirectory",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "durationMs",
            "required": false,
            "in": "query",
            "description": "Filter by durationMs",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "shellType",
            "required": false,
            "in": "query",
            "description": "Filter by shellType",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "terminalSessionId",
            "required": false,
            "in": "query",
            "description": "Filter by terminalSessionId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationCommandHistoryResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Paginated CommandHistory records",
        "tags": [
          "CommandHistory"
        ]
      }
    },
    "/api/command-history/{id}": {
      "get": {
        "operationId": "CommandHistoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCommandHistoryDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Find CommandHistory by ID",
        "tags": [
          "CommandHistory"
        ]
      },
      "patch": {
        "operationId": "CommandHistoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommandHistoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCommandHistoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update CommandHistory by ID",
        "tags": [
          "CommandHistory"
        ]
      },
      "delete": {
        "operationId": "CommandHistoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient role"
          },
          "404": {
            "description": "Record not found."
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete CommandHistory by ID",
        "tags": [
          "CommandHistory"
        ]
      }
    }
  },
  "info": {
    "title": "API Server",
    "description": "Authentication and Role Protected APIs",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Auth",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT token in the format: Bearer <token>",
        "type": "http"
      },
      "cookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "jwt",
        "description": "JWT stored in cookie (for web clients)"
      }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email used to log in",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password for authentication",
            "example": "StrongPassword123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "CreateJwtUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user",
            "example": "21jdh-jsdhd-jasjasd"
          },
          "sub": {
            "type": "string",
            "description": "Subject claim (typically user ID)",
            "example": "21jdh-jsdhd-jasjasd"
          },
          "email": {
            "type": "string",
            "description": "Email address associated with the user",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "description": "Full name of the user",
            "example": "John Doe"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number of the user",
            "example": "+1234567890"
          },
          "role": {
            "type": "string",
            "description": "User role within the system",
            "enum": [
              "ADMIN",
              "USER",
              "MANAGER"
            ],
            "example": "USER"
          },
          "image": {
            "type": "string",
            "description": "Profile picture filename or URL",
            "example": "john.jpg"
          },
          "provider": {
            "type": "string",
            "description": "Authentication provider used (e.g., Google, GitHub)",
            "example": "Google"
          },
          "tokens": {
            "type": "object",
            "description": "Access/refresh tokens returned by the provider",
            "example": {
              "access_token": "ya29.a0AfH6S...",
              "refresh_token": "1//0gL8y...",
              "expiry_date": 1699440000000
            }
          },
          "username": {
            "type": "string",
            "description": "Unique username (if applicable)",
            "example": "user01"
          }
        },
        "required": [
          "id",
          "sub",
          "email"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT Access Token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6..."
          },
          "refresh_token": {
            "type": "string",
            "description": "JWT Refresh Token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6REFRESH..."
          },
          "user": {
            "description": "Authenticated user details",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateJwtUserDto"
              }
            ]
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "user"
        ]
      },
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT Access Token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6..."
          },
          "user": {
            "description": "Authenticated user details",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateJwtUserDto"
              }
            ]
          }
        },
        "required": [
          "access_token",
          "user"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Unique email address of the user",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "Secure password with at least 8 characters",
            "example": "StrongPassword123",
            "minLength": 8
          },
          "name": {
            "type": "string",
            "description": "Full name of the user",
            "example": "John Doe"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number of the user (E.164 format recommended)",
            "example": "+1234567890"
          },
          "role": {
            "type": "string",
            "description": "User role within the system",
            "enum": [
              "ADMIN",
              "USER",
              "MANAGER"
            ],
            "example": "USER"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AuthUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "21jdh-jsdhd-jasjasd"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "phone_number": {
            "type": "string",
            "example": "+1234567890"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER",
              "MANAGER"
            ],
            "example": "USER"
          },
          "image": {
            "type": "string",
            "example": "john.jpg"
          },
          "username": {
            "type": "string",
            "example": "user01"
          }
        },
        "required": [
          "id",
          "email",
          "role"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "email field"
          },
          "emailVerified": {
            "format": "date-time",
            "type": "string",
            "description": "emailVerified field"
          },
          "image": {
            "type": "string",
            "description": "image field"
          },
          "name": {
            "type": "string",
            "description": "name field"
          },
          "phone_number": {
            "type": "string",
            "description": "phone_number field"
          },
          "username": {
            "type": "string",
            "description": "username field"
          }
        },
        "required": [
          "email",
          "emailVerified",
          "image",
          "name",
          "phone_number",
          "username"
        ]
      },
      "PaginationUserResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUserDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "email field"
          },
          "emailVerified": {
            "format": "date-time",
            "type": "string",
            "description": "emailVerified field"
          },
          "image": {
            "type": "string",
            "description": "image field"
          },
          "name": {
            "type": "string",
            "description": "name field"
          },
          "phone_number": {
            "type": "string",
            "description": "phone_number field"
          },
          "username": {
            "type": "string",
            "description": "username field"
          }
        }
      },
      "ReadFileResponseDto": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The absolute or relative path to the file on the server, if applicable (e.g., for local files).",
            "example": "/path/to/your/file.ts",
            "nullable": true
          },
          "filename": {
            "type": "string",
            "description": "The original filename (e.g., \"document.pdf\", \"index.ts\").",
            "example": "example.ts"
          },
          "mimeType": {
            "type": "string",
            "description": "The MIME type of the file (e.g., \"text/plain\", \"application/json\").",
            "example": "text/typescript"
          },
          "language": {
            "type": "string",
            "description": "The detected programming language of the file content, if applicable (e.g., \"typescript\", \"json\", \"markdown\").",
            "example": "typescript",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The content of the file. For text-based files, this is the raw text. For binary files, it is the base64-encoded string.",
            "example": "console.log(\"Hello World\");"
          },
          "blob": {
            "type": "string",
            "description": "A base64 encoded data URL (blob) of the file, if requested. Format: `data:[<mediatype>][;base64],<data>`",
            "example": "data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==",
            "nullable": true
          }
        },
        "required": [
          "filename",
          "mimeType",
          "content"
        ]
      },
      "CreateFileDto": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "Path to file or directory"
          },
          "isDirectory": {
            "type": "boolean",
            "description": "Whether this is a directory",
            "default": false
          },
          "content": {
            "type": "string",
            "description": "Optional content for the file (ignored if directory)"
          },
          "type": {
            "type": "string",
            "description": "Whether it is a folder or a file.",
            "default": "file"
          }
        },
        "required": [
          "filePath",
          "isDirectory"
        ]
      },
      "RenameFileDto": {
        "type": "object",
        "properties": {
          "oldPath": {
            "type": "string",
            "description": "The current path of the file or folder to rename",
            "example": "/path/to/old-file.txt"
          },
          "newPath": {
            "type": "string",
            "description": "The new desired path (including the new name)",
            "example": "/path/to/new-file.txt"
          }
        },
        "required": [
          "oldPath",
          "newPath"
        ]
      },
      "RenameFileResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the rename operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "A message describing the result of the operation",
            "example": "Successfully renamed \"/path/to/old-file.txt\" to \"/path/to/new-file.txt\""
          },
          "oldPath": {
            "type": "string",
            "description": "The original path of the file or folder",
            "example": "/path/to/old-file.txt"
          },
          "newPath": {
            "type": "string",
            "description": "The new path of the file or folder",
            "example": "/path/to/new-file.txt"
          }
        },
        "required": [
          "success",
          "message",
          "oldPath",
          "newPath"
        ]
      },
      "SearchFileDto": {
        "type": "object",
        "properties": {
          "directory": {
            "type": "string",
            "description": "The root directory to start the search (defaults to current working directory)",
            "example": "/path/to/start"
          },
          "searchTerm": {
            "type": "string",
            "description": "The name or part of the name of the file/folder to search for",
            "example": "report"
          }
        },
        "required": [
          "searchTerm"
        ]
      },
      "SearchFileResponseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the file or folder",
            "example": "report.txt"
          },
          "path": {
            "type": "string",
            "description": "Full path of the file or folder",
            "example": "/path/to/report.txt"
          },
          "isDirectory": {
            "type": "boolean",
            "description": "Indicates if the item is a directory",
            "example": false
          },
          "type": {
            "type": "string",
            "description": "Type of the item: file or folder",
            "example": "file",
            "enum": [
              "file",
              "folder"
            ]
          }
        },
        "required": [
          "name",
          "path",
          "isDirectory",
          "type"
        ]
      },
      "ScanFileDto": {
        "type": "object",
        "properties": {
          "scanPaths": {
            "description": "An array of paths (relative or absolute) to scan. Each path can be a directory or a file. Defaults to [\".\"].",
            "example": [
              ".",
              "src/auth",
              "package.json"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projectRoot": {
            "type": "string",
            "description": "The root directory of the project, used for calculating relative paths. Defaults to process.cwd() if not provided.",
            "example": "/media/eddie/Data/projects/nestJS/nest-modules/full-stack"
          },
          "verbose": {
            "type": "boolean",
            "description": "If true, logs detailed information during scanning.",
            "example": false
          }
        },
        "required": [
          "scanPaths"
        ]
      },
      "ScannedFileDto": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "Absolute path of the file",
            "example": "/app/src/main.ts"
          },
          "relativePath": {
            "type": "string",
            "description": "Path relative to the project root",
            "example": "src/main.ts"
          },
          "content": {
            "type": "string",
            "description": "Content of the file",
            "example": "console.log(\"Hello, world!\");"
          }
        },
        "required": [
          "filePath",
          "relativePath",
          "content"
        ]
      },
      "RemoteFileEntryDto": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Relative path of the file"
          },
          "size": {
            "type": "number",
            "description": "Size of the file in bytes"
          },
          "modifiedTime": {
            "type": "string",
            "description": "Last modified time of the file",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "path",
          "size",
          "modifiedTime"
        ]
      },
      "RemoteDirectoryEntryDto": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Relative path of the directory"
          }
        },
        "required": [
          "path"
        ]
      },
      "RemoteFileListDto": {
        "type": "object",
        "properties": {
          "files": {
            "description": "List of files with metadata",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemoteFileEntryDto"
            }
          },
          "directories": {
            "description": "List of directories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemoteDirectoryEntryDto"
            }
          }
        },
        "required": [
          "files",
          "directories"
        ]
      },
      "RemoteFileContentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content to write to the file"
          }
        },
        "required": [
          "content"
        ]
      },
      "CommandDto": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "Shell command to execute on remote server",
            "example": "ls -la /var/www"
          }
        },
        "required": [
          "command"
        ]
      },
      "CommandResultDto": {
        "type": "object",
        "properties": {
          "stdout": {
            "type": "string",
            "description": "Standard output from the command",
            "example": "total 12\ndrwxr-xr-x  3 root root 4096 Jun 25 12:00 .\ndrwxr-xr-x 20 root root 4096 Jun 25 12:00 ..\n-rw-r--r--  1 root root    0 Jun 25 12:00 index.html"
          },
          "stderr": {
            "type": "string",
            "description": "Standard error from the command",
            "example": ""
          }
        },
        "required": [
          "stdout",
          "stderr"
        ]
      },
      "FixJsonDto": {
        "type": "object",
        "properties": {}
      },
      "FormatCodeDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "function test() { return 42; }"
          },
          "language": {
            "type": "string",
            "example": "javascript"
          }
        },
        "required": [
          "code",
          "language"
        ]
      },
      "UploadEnvDto": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "Upload your .env file via multipart/form-data. Either `file` or `filepath` must be provided."
          },
          "filepath": {
            "type": "string",
            "description": "Optional path to a local .env file on the server. Either `file` or `filepath` must be provided.",
            "example": ".env.local"
          },
          "_note_either_file_or_filepath": {
            "type": "string",
            "description": "Indicates that either `file` (uploaded .env) or `filepath` (local path) must be provided, but not necessarily both.",
            "enum": [
              "file_or_filepath"
            ],
            "readOnly": true
          }
        }
      },
      "MarkdownDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Markdown content containing a title (# Title)",
            "example": "# Hello World\nThis is some markdown."
          }
        },
        "required": [
          "content"
        ]
      },
      "HtmlDto": {
        "type": "object",
        "properties": {
          "html": {
            "type": "string",
            "description": "The HTML content to convert to DOCX.",
            "example": "<h1>Hello World</h1><p>This is some <strong>HTML</strong> content.</p>"
          }
        },
        "required": [
          "html"
        ]
      },
      "JsonToYamlDto": {
        "type": "object",
        "properties": {
          "json": {
            "type": "object",
            "description": "The JSON object to convert",
            "example": {
              "name": "John Doe",
              "age": 30,
              "skills": [
                "NestJS",
                "SolidJS"
              ]
            }
          },
          "filename": {
            "type": "string",
            "description": "Optional filename (with .yaml extension)",
            "example": "custom-file.yaml"
          }
        },
        "required": [
          "json"
        ]
      },
      "JsonToYamlResponseDto": {
        "type": "object",
        "properties": {
          "yaml": {
            "type": "string",
            "description": "The converted YAML output as a string",
            "example": "name: John Doe\nage: 30\nskills:\n  - NestJS\n  - SolidJS\n"
          },
          "filePath": {
            "type": "string",
            "description": "Path to the saved YAML file (if saved)",
            "example": "output/output.yaml"
          }
        },
        "required": [
          "yaml"
        ]
      },
      "YamlToJsonDto": {
        "type": "object",
        "properties": {
          "yaml": {
            "type": "string",
            "description": "The YAML string to convert",
            "example": "name: John Doe\nage: 30\nskills:\n  - NestJS\n  - SolidJS\n"
          },
          "filename": {
            "type": "string",
            "description": "Optional filename (with .json extension)",
            "example": "custom-file.json"
          }
        },
        "required": [
          "yaml"
        ]
      },
      "YamlToJsonResponseDto": {
        "type": "object",
        "properties": {
          "json": {
            "type": "object",
            "description": "The converted JSON output",
            "example": {
              "name": "John Doe",
              "age": 30,
              "skills": [
                "NestJS",
                "SolidJS"
              ]
            }
          },
          "filePath": {
            "type": "string",
            "description": "Path to the saved JSON file (if saved)",
            "example": "output/output.json"
          }
        },
        "required": [
          "json"
        ]
      },
      "SshCommandDto": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "port": {
            "type": "number"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "privateKeyPath": {
            "type": "string"
          },
          "command": {
            "type": "string"
          }
        },
        "required": [
          "host",
          "username",
          "command"
        ]
      },
      "TerminalCommandDto": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "Shell command to execute",
            "example": "ls -la"
          },
          "cwd": {
            "type": "string",
            "description": "Working directory where the command should be run",
            "example": "./"
          }
        },
        "required": [
          "command",
          "cwd"
        ]
      },
      "CreateFolderDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          },
          "path": {
            "type": "string",
            "description": "path field"
          },
          "parentId": {
            "type": "string",
            "description": "parentId field"
          }
        },
        "required": [
          "name",
          "path",
          "parentId"
        ]
      },
      "PaginationFolderResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateFolderDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateFolderDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          },
          "path": {
            "type": "string",
            "description": "path field"
          },
          "parentId": {
            "type": "string",
            "description": "parentId field"
          }
        }
      },
      "OptimizeCodeDto": {
        "type": "object",
        "properties": {
          "codeSnippet": {
            "type": "string",
            "description": "The code snippet to optimize for performance or readability",
            "example": "function add(a, b) { return a + b; }"
          },
          "language": {
            "type": "string",
            "description": "Optional programming language of the code snippet",
            "example": "JavaScript"
          },
          "output": {
            "type": "string",
            "description": "Preferred output format of the optimized code",
            "example": "markdown",
            "enum": [
              "markdown",
              "json",
              "html",
              "text"
            ],
            "default": "text"
          }
        },
        "required": [
          "codeSnippet"
        ]
      },
      "AnalyzeCodeDto": {
        "type": "object",
        "properties": {
          "codeSnippet": {
            "type": "string",
            "description": "The code snippet to analyze for issues, improvements, or best practices",
            "example": "let total = 0; for (let i = 0; i < items.length; i++) { total += items[i]; }"
          },
          "language": {
            "type": "string",
            "description": "Optional programming language of the code snippet",
            "example": "TypeScript"
          },
          "output": {
            "type": "string",
            "description": "Preferred output format of the code analysis",
            "example": "text",
            "enum": [
              "markdown",
              "json",
              "html",
              "text"
            ],
            "default": "text"
          }
        },
        "required": [
          "codeSnippet"
        ]
      },
      "RepairCodeDto": {
        "type": "object",
        "properties": {
          "codeSnippet": {
            "type": "string",
            "description": "The code snippet to repair by fixing syntax or logical errors",
            "example": "functon greet() { console.log(\"Hello\") }"
          },
          "language": {
            "type": "string",
            "description": "Optional programming language of the code snippet",
            "example": "JavaScript"
          },
          "output": {
            "type": "string",
            "description": "Preferred output format of the repaired code",
            "example": "json",
            "enum": [
              "markdown",
              "json",
              "html",
              "text"
            ],
            "default": "text"
          }
        },
        "required": [
          "codeSnippet"
        ]
      },
      "GenerateCodeDto": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The instruction or prompt for code generation",
            "example": "Create a React component that displays a user profile card."
          },
          "language": {
            "type": "string",
            "description": "Optional programming language for the generated code",
            "example": "TypeScript"
          },
          "topic": {
            "type": "string",
            "description": "Optional topic or context for the code generation",
            "example": "React UI Components"
          },
          "output": {
            "type": "string",
            "description": "Preferred output format of the generated code",
            "example": "markdown",
            "enum": [
              "markdown",
              "json",
              "html",
              "text"
            ],
            "default": "text"
          }
        },
        "required": [
          "prompt"
        ]
      },
      "GenerateDocDto": {
        "type": "object",
        "properties": {
          "codeSnippet": {
            "type": "string",
            "description": "The code snippet to document",
            "example": "function greet(name) { return `Hello, ${name}`; }"
          },
          "language": {
            "type": "string",
            "description": "Optional programming language of the code",
            "example": "JavaScript"
          },
          "topic": {
            "type": "string",
            "description": "Optional topic or context for the code",
            "example": "Greeting Utility Functions"
          },
          "isComment": {
            "type": "boolean",
            "description": "Whether to generate documentation as inline code comments",
            "example": true,
            "default": false
          },
          "output": {
            "type": "string",
            "description": "Preferred output format of the documentation",
            "example": "markdown",
            "enum": [
              "markdown",
              "json",
              "html",
              "text"
            ],
            "default": "text"
          }
        },
        "required": [
          "codeSnippet"
        ]
      },
      "ImageCaptionDto": {
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "prompt": {
            "type": "string",
            "example": "Caption this image."
          }
        },
        "required": [
          "imageUrl"
        ]
      },
      "CaptionFromUrlDto": {
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "prompt": {
            "type": "string",
            "example": "What is shown in this image?"
          }
        },
        "required": [
          "imageUrl"
        ]
      },
      "CaptionFromFileDto": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "example": "./assets/sample.jpg"
          },
          "prompt": {
            "type": "string",
            "example": "Provide a short caption for this file."
          }
        },
        "required": [
          "filePath"
        ]
      },
      "SpeakerDto": {
        "type": "object",
        "properties": {
          "speaker": {
            "type": "string",
            "example": "Eddie",
            "description": "Speaker name as referenced in the prompt"
          },
          "voiceName": {
            "type": "string",
            "example": "Kore",
            "description": "Voice name to use for the speaker"
          }
        },
        "required": [
          "speaker",
          "voiceName"
        ]
      },
      "TtsRequestDto": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "example": "Eddie: AI is changing everything!\nMarionette: And it's influencing fashion too.",
            "description": "Text prompt with named speakers"
          },
          "speakers": {
            "description": "Array of speaker-voice configurations",
            "example": [
              {
                "speaker": "Eddie",
                "voiceName": "Kore"
              },
              {
                "speaker": "Marionette",
                "voiceName": "Puck"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeakerDto"
            }
          },
          "languageCode": {
            "type": "string",
            "example": "en-US",
            "description": "Language code for the speech synthesis (optional)"
          }
        },
        "required": [
          "prompt",
          "speakers"
        ]
      },
      "GenerateTextDto": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The prompt text to send to the Gemini model.",
            "example": "Write a short story about a brave knight."
          },
          "systemInstruction": {
            "type": "string",
            "description": "Optional system instruction to guide the model's behavior (e.g., persona or style). If provided for a new conversation, it will be used for subsequent requests in that conversation.",
            "example": "Act as a seasoned cybersecurity expert and explain common phishing techniques."
          },
          "conversationId": {
            "type": "string",
            "description": "Optional ID of an ongoing conversation. If provided, the system instruction from the first request in this conversation will be used.",
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          }
        },
        "required": [
          "prompt"
        ]
      },
      "GenerateImageBase64Dto": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The prompt text to accompany the image.",
            "example": "Describe this image."
          },
          "base64Image": {
            "type": "string",
            "description": "The Base64 encoded image data (without \"data:image/jpeg;base64,\" prefix).",
            "example": "iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg=="
          },
          "mimeType": {
            "type": "string",
            "description": "The MIME type of the image (e.g., \"image/jpeg\", \"image/png\").",
            "example": "image/jpeg"
          },
          "systemInstruction": {
            "type": "string",
            "description": "Optional system instruction to guide the model's behavior (e.g., persona or style). If provided for a new conversation, it will be used for subsequent requests in that conversation.",
            "example": "Analyze this image from a botanical perspective."
          },
          "conversationId": {
            "type": "string",
            "description": "Optional ID of an ongoing conversation. If provided, the system instruction from the first request in this conversation will be used.",
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          }
        },
        "required": [
          "prompt",
          "base64Image",
          "mimeType"
        ]
      },
      "InlineDataDto": {
        "type": "object",
        "properties": {
          "mime_type": {
            "type": "string",
            "description": "The MIME type of the inline data (e.g., image/png, application/pdf)",
            "example": "image/png"
          },
          "data": {
            "type": "string",
            "description": "Base64-encoded string of the file or image data",
            "example": "iVBORw0KGgoAAAANSUhEUgAAAAUA..."
          }
        },
        "required": [
          "mime_type",
          "data"
        ]
      },
      "ConversationPartDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text content of the message part",
            "example": "Hello, how can I help you?"
          },
          "inlineData": {
            "description": "Inline file or image data",
            "allOf": [
              {
                "$ref": "#/components/schemas/InlineDataDto"
              }
            ]
          }
        }
      },
      "ConversationHistoryItemDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the message sender",
            "enum": [
              "user",
              "model"
            ],
            "example": "user"
          },
          "parts": {
            "description": "Array of message parts, each containing either text or inline data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationPartDto"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp indicating when the message was created",
            "example": "2025-08-20T21:05:10.740Z",
            "format": "date-time"
          }
        },
        "required": [
          "role",
          "parts",
          "createdAt"
        ]
      },
      "CreateSchemaDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          },
          "schema": {
            "type": "object",
            "description": "schema field"
          }
        },
        "required": [
          "name",
          "schema"
        ]
      },
      "Object": {
        "type": "object",
        "properties": {}
      },
      "PaginationSchemaResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSchemaDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateSchemaDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          },
          "schema": {
            "type": "object",
            "description": "schema field"
          }
        }
      },
      "CreateLogDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of log entry"
          },
          "level": {
            "type": "string",
            "description": "Log level (e.g., INFO, ERROR, DEBUG)"
          },
          "tags": {
            "description": "Tags associated with the log",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "data": {
            "type": "object",
            "description": "Structured log data"
          }
        },
        "required": [
          "type",
          "level",
          "tags",
          "data"
        ]
      },
      "UpdateLogDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of log entry"
          },
          "level": {
            "type": "string",
            "description": "Log level (e.g., INFO, ERROR, DEBUG)"
          },
          "tags": {
            "description": "Tags associated with the log",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "data": {
            "type": "object",
            "description": "Structured log data"
          }
        }
      },
      "OptimizationResultDto": {
        "type": "object",
        "properties": {}
      },
      "GenerateResumeDto": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The detailed prompt describing the resume to be generated. This should include personal details, desired job role, experience level, key skills, and any specific sections or formatting requirements.",
            "example": "Generate a resume for a senior software engineer with 10 years of experience in TypeScript, React, Node.js, and AWS. Include a strong summary, a detailed experience section with quantifiable achievements, education, and a skills section. Target roles in FinTech.",
            "minLength": 1
          },
          "systemInstruction": {
            "type": "string",
            "description": "Optional: Custom system instruction to guide the AI model on how to generate the resume (e.g., \"Use a modern, minimalist design\", \"Focus on leadership experience\"). Overrides default instructions.",
            "example": "Generate the resume strictly in JSON format, outlining each section as a separate object."
          },
          "conversationId": {
            "type": "string",
            "description": "Optional: An existing conversation ID to maintain context with the AI model for continued interaction (e.g., if refining a previously generated resume).",
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          }
        },
        "required": [
          "prompt"
        ]
      },
      "EnhanceResumeDto": {
        "type": "object",
        "properties": {
          "resumeContent": {
            "type": "string",
            "description": "The full plain text content of the resume to be enhanced.",
            "example": "John Doe\nSoftware Engineer\nExperience:\n- Developed X using Y...\nSkills: Z",
            "minLength": 1
          },
          "sectionToEnhance": {
            "type": "string",
            "description": "Optional: A specific section of the resume to focus the enhancement on (e.g., \"summary\", \"experience\", \"skills\").",
            "example": "Experience"
          },
          "enhancementGoal": {
            "type": "string",
            "description": "Optional: A specific goal or instruction for the enhancement (e.g., \"make more concise\", \"add metrics\", \"target leadership roles\").",
            "example": "Make the experience section more action-oriented with quantifiable results."
          },
          "systemInstruction": {
            "type": "string",
            "description": "Optional: Custom system instruction to guide the AI model for nuanced enhancement requests. Overrides default instructions.",
            "example": "Ensure all bullet points start with strong action verbs and highlight agile methodologies."
          },
          "conversationId": {
            "type": "string",
            "description": "Optional: An existing conversation ID to maintain context with the AI model for continued interaction.",
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          }
        },
        "required": [
          "resumeContent"
        ]
      },
      "LaunchInstanceDto": {
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string",
            "description": "The ID of the AMI to use for the instance",
            "example": "ami-0abcdef1234567890"
          },
          "instanceType": {
            "type": "string",
            "description": "The type of instance to launch",
            "enum": [
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t3.micro",
              "t3.small",
              "t3.medium",
              "t3.large"
            ],
            "example": "t2.micro"
          },
          "securityGroupIds": {
            "description": "The IDs of the security groups for the instance",
            "example": [
              "sg-0123456789abcdef0"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subnetId": {
            "type": "string",
            "description": "The ID of the subnet to launch the instance into",
            "example": "subnet-0123456789abcdef0"
          },
          "keyName": {
            "type": "string",
            "description": "The name of the key pair to use for the instance",
            "example": "my-key-pair"
          },
          "tags": {
            "type": "object",
            "description": "Tags to apply to the instance",
            "example": {
              "Name": "My Instance",
              "Environment": "Development"
            }
          },
          "userData": {
            "type": "string",
            "description": "User data to make available to the instance",
            "example": "#!/bin/bash\necho \"Hello, World!\" > /tmp/hello.txt"
          }
        },
        "required": [
          "imageId",
          "instanceType"
        ]
      },
      "CostAndUsageResponse": {
        "type": "object",
        "properties": {
          "TotalCost": {
            "type": "object",
            "description": "The total cost for the requested time period, including metrics like BlendedCost.",
            "example": {
              "BlendedCost": {
                "Amount": "0.0579495744",
                "Unit": "USD"
              }
            }
          },
          "Granularity": {
            "type": "string",
            "description": "The granularity of the cost report (e.g., MONTHLY).",
            "example": "MONTHLY"
          },
          "StartDate": {
            "type": "string",
            "description": "The start date of the report in YYYY-MM-DD format.",
            "example": "2025-03-01"
          },
          "EndDate": {
            "type": "string",
            "description": "The end date of the report in YYYY-MM-DD format.",
            "example": "2025-05-01"
          }
        },
        "required": [
          "TotalCost",
          "Granularity",
          "StartDate",
          "EndDate"
        ]
      },
      "StoreCommandDto": {
        "type": "object",
        "properties": {}
      },
      "IpPermissionDto": {
        "type": "object",
        "properties": {
          "ipProtocol": {
            "type": "string",
            "example": "tcp"
          },
          "fromPort": {
            "type": "number",
            "example": 22
          },
          "toPort": {
            "type": "number",
            "example": 22
          },
          "ipRanges": {
            "example": [
              {
                "cidrIp": "0.0.0.0/0"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ipProtocol",
          "ipRanges"
        ]
      },
      "TagDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "Name"
          },
          "value": {
            "type": "string",
            "example": "WebSecurityGroup"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "SecurityGroupDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "example": "sg-0123456789abcdef0"
          },
          "groupName": {
            "type": "string",
            "example": "web-sg"
          },
          "description": {
            "type": "string",
            "example": "Allow web traffic"
          },
          "vpcId": {
            "type": "string",
            "example": "vpc-0123abcd4567efgh8"
          },
          "inboundRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpPermissionDto"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            }
          }
        },
        "required": [
          "groupId",
          "groupName",
          "description"
        ]
      },
      "CreateSecurityGroupDto": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "example": "my-new-sg"
          },
          "description": {
            "type": "string",
            "example": "Security group for my app"
          },
          "vpcId": {
            "type": "string",
            "example": "vpc-0123456789abcdef0"
          }
        },
        "required": [
          "groupName",
          "description",
          "vpcId"
        ]
      },
      "UpdateSecurityGroupDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "example": "sg-0123456789abcdef0"
          },
          "groupName": {
            "type": "string",
            "example": "updated-sg-name"
          },
          "description": {
            "type": "string",
            "example": "Updated description"
          }
        },
        "required": [
          "groupId",
          "groupName",
          "description"
        ]
      },
      "ManageIngressEgressDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "example": "sg-0123456789abcdef0"
          },
          "protocol": {
            "type": "string",
            "example": "tcp"
          },
          "fromPort": {
            "type": "number",
            "example": 80
          },
          "toPort": {
            "type": "number",
            "example": 80
          },
          "cidr": {
            "type": "string",
            "example": "0.0.0.0/0"
          },
          "direction": {
            "type": "string",
            "example": "ingress",
            "enum": [
              "ingress",
              "egress"
            ]
          }
        },
        "required": [
          "groupId",
          "protocol",
          "fromPort",
          "cidr",
          "direction"
        ]
      },
      "TranspilerOptionsDto": {
        "type": "object",
        "properties": {
          "loader": {
            "type": "string",
            "enum": [
              "tsx",
              "ts",
              "jsx",
              "js"
            ],
            "description": "The loader type for the code."
          },
          "target": {
            "type": "string",
            "enum": [
              "es2017",
              "es2018",
              "esnext"
            ],
            "description": "Target JavaScript version."
          },
          "solid": {
            "type": "boolean",
            "description": "Indicates if the code is SolidJS."
          },
          "react": {
            "type": "boolean",
            "description": "Indicates if the code is React."
          }
        }
      },
      "TranspilerRequestDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Source code to transpile."
          },
          "options": {
            "description": "Transpilation options.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TranspilerOptionsDto"
              }
            ]
          }
        },
        "required": [
          "code"
        ]
      },
      "TranspilerResponseDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Transpiled JavaScript code."
          }
        },
        "required": [
          "code"
        ]
      },
      "CreateGeminiRequestDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "userId field"
          },
          "conversationId": {
            "type": "string",
            "description": "conversationId field"
          },
          "modelUsed": {
            "type": "string",
            "description": "modelUsed field"
          },
          "prompt": {
            "type": "string",
            "description": "prompt field"
          },
          "systemInstruction": {
            "type": "string",
            "description": "systemInstruction field"
          },
          "imageUrl": {
            "type": "string",
            "description": "imageUrl field"
          },
          "imageData": {
            "type": "string",
            "description": "imageData field"
          },
          "fileMimeType": {
            "type": "string",
            "description": "fileMimeType field"
          },
          "fileData": {
            "type": "string",
            "description": "fileData field"
          }
        },
        "required": [
          "userId",
          "conversationId",
          "modelUsed",
          "prompt",
          "systemInstruction",
          "imageUrl",
          "imageData",
          "fileMimeType",
          "fileData"
        ]
      },
      "PaginationGeminiRequestResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateGeminiRequestDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateGeminiRequestDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "userId field"
          },
          "conversationId": {
            "type": "string",
            "description": "conversationId field"
          },
          "modelUsed": {
            "type": "string",
            "description": "modelUsed field"
          },
          "prompt": {
            "type": "string",
            "description": "prompt field"
          },
          "systemInstruction": {
            "type": "string",
            "description": "systemInstruction field"
          },
          "imageUrl": {
            "type": "string",
            "description": "imageUrl field"
          },
          "imageData": {
            "type": "string",
            "description": "imageData field"
          },
          "fileMimeType": {
            "type": "string",
            "description": "fileMimeType field"
          },
          "fileData": {
            "type": "string",
            "description": "fileData field"
          }
        }
      },
      "CreateGeminiResponseDto": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "requestId field"
          },
          "responseText": {
            "type": "string",
            "description": "responseText field"
          },
          "finishReason": {
            "type": "string",
            "description": "finishReason field"
          },
          "safetyRatings": {
            "type": "object",
            "description": "safetyRatings field"
          },
          "tokenCount": {
            "type": "number",
            "description": "tokenCount field"
          }
        },
        "required": [
          "requestId",
          "responseText",
          "finishReason",
          "safetyRatings",
          "tokenCount"
        ]
      },
      "PaginationGeminiResponseResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateGeminiResponseDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateGeminiResponseDto": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "requestId field"
          },
          "responseText": {
            "type": "string",
            "description": "responseText field"
          },
          "finishReason": {
            "type": "string",
            "description": "finishReason field"
          },
          "safetyRatings": {
            "type": "object",
            "description": "safetyRatings field"
          },
          "tokenCount": {
            "type": "number",
            "description": "tokenCount field"
          }
        }
      },
      "StopRecordingResponse": {
        "type": "object",
        "properties": {}
      },
      "StartRecordingResponseDto": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the recording file"
          },
          "id": {
            "type": "string",
            "description": "Recording ID"
          }
        },
        "required": [
          "path",
          "id"
        ]
      },
      "CreateRecordingDto": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the recording file"
          },
          "type": {
            "type": "string",
            "description": "Type of the recording (e.g., audio, video)"
          },
          "pid": {
            "type": "string",
            "description": "Process ID related to this recording"
          },
          "status": {
            "type": "string",
            "description": "Current status of the recording"
          },
          "data": {
            "type": "object",
            "description": "Structured recording data"
          },
          "createdById": {
            "type": "string",
            "description": "ID of the user who created the recording"
          }
        },
        "required": [
          "path",
          "type",
          "pid",
          "status",
          "data",
          "createdById"
        ]
      },
      "RecordingResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "createdAt": {
            "type": "string"
          },
          "createdById": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "path",
          "type",
          "pid",
          "status",
          "data",
          "createdAt",
          "createdById"
        ]
      },
      "PaginationRecordingResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordingResultDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateRecordingDto": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the recording file"
          },
          "type": {
            "type": "string",
            "description": "Type of the recording (e.g., audio, video)"
          },
          "pid": {
            "type": "string",
            "description": "Process ID related to this recording"
          },
          "status": {
            "type": "string",
            "description": "Current status of the recording"
          },
          "data": {
            "type": "object",
            "description": "Structured recording data"
          },
          "createdById": {
            "type": "string",
            "description": "ID of the user who created the recording"
          }
        }
      },
      "CreateAccountDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type field"
          },
          "provider": {
            "type": "string",
            "description": "provider field"
          },
          "providerAccountId": {
            "type": "string",
            "description": "providerAccountId field"
          },
          "refresh_token": {
            "type": "string",
            "description": "refresh_token field"
          },
          "access_token": {
            "type": "string",
            "description": "access_token field"
          },
          "expires_at": {
            "type": "number",
            "description": "expires_at field"
          },
          "token_type": {
            "type": "string",
            "description": "token_type field"
          },
          "scope": {
            "type": "string",
            "description": "scope field"
          },
          "id_token": {
            "type": "string",
            "description": "id_token field"
          },
          "session_state": {
            "type": "string",
            "description": "session_state field"
          }
        },
        "required": [
          "type",
          "provider",
          "providerAccountId",
          "refresh_token",
          "access_token",
          "expires_at",
          "token_type",
          "scope",
          "id_token",
          "session_state"
        ]
      },
      "PaginationAccountResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAccountDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateAccountDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type field"
          },
          "provider": {
            "type": "string",
            "description": "provider field"
          },
          "providerAccountId": {
            "type": "string",
            "description": "providerAccountId field"
          },
          "refresh_token": {
            "type": "string",
            "description": "refresh_token field"
          },
          "access_token": {
            "type": "string",
            "description": "access_token field"
          },
          "expires_at": {
            "type": "number",
            "description": "expires_at field"
          },
          "token_type": {
            "type": "string",
            "description": "token_type field"
          },
          "scope": {
            "type": "string",
            "description": "scope field"
          },
          "id_token": {
            "type": "string",
            "description": "id_token field"
          },
          "session_state": {
            "type": "string",
            "description": "session_state field"
          }
        }
      },
      "CreateOrganizationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          }
        },
        "required": [
          "name"
        ]
      },
      "PaginationOrganizationResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOrganizationDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateOrganizationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          }
        }
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          },
          "description": {
            "type": "string",
            "description": "description field"
          },
          "path": {
            "type": "string",
            "description": "path field"
          },
          "technologies": {
            "description": "technologies field",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionControl": {
            "type": "string",
            "description": "versionControl field"
          },
          "repositoryUrl": {
            "type": "string",
            "description": "repositoryUrl field"
          },
          "lastOpenedAt": {
            "format": "date-time",
            "type": "string",
            "description": "lastOpenedAt field"
          },
          "ownerId": {
            "type": "string",
            "description": "ownerId field"
          },
          "metadata": {
            "type": "object",
            "description": "metadata field"
          }
        },
        "required": [
          "name",
          "description",
          "path",
          "technologies",
          "versionControl",
          "repositoryUrl",
          "lastOpenedAt",
          "ownerId",
          "metadata"
        ]
      },
      "PaginationProjectResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProjectDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          },
          "description": {
            "type": "string",
            "description": "description field"
          },
          "path": {
            "type": "string",
            "description": "path field"
          },
          "technologies": {
            "description": "technologies field",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionControl": {
            "type": "string",
            "description": "versionControl field"
          },
          "repositoryUrl": {
            "type": "string",
            "description": "repositoryUrl field"
          },
          "lastOpenedAt": {
            "format": "date-time",
            "type": "string",
            "description": "lastOpenedAt field"
          },
          "ownerId": {
            "type": "string",
            "description": "ownerId field"
          },
          "metadata": {
            "type": "object",
            "description": "metadata field"
          }
        }
      },
      "CreateSchemaSubmissionDto": {
        "type": "object",
        "properties": {
          "schemaName": {
            "type": "string",
            "description": "schemaName field"
          },
          "submittedById": {
            "type": "string",
            "description": "submittedById field"
          },
          "data": {
            "type": "object",
            "description": "data field"
          },
          "schemaId": {
            "type": "string",
            "description": "schemaId field"
          }
        },
        "required": [
          "schemaName",
          "submittedById",
          "data",
          "schemaId"
        ]
      },
      "PaginationSchemaSubmissionResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSchemaSubmissionDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateSchemaSubmissionDto": {
        "type": "object",
        "properties": {
          "schemaName": {
            "type": "string",
            "description": "schemaName field"
          },
          "submittedById": {
            "type": "string",
            "description": "submittedById field"
          },
          "data": {
            "type": "object",
            "description": "data field"
          },
          "schemaId": {
            "type": "string",
            "description": "schemaId field"
          }
        }
      },
      "ExtractCodeDto": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "Absolute or relative path to the markdown file to process",
            "example": "./docs/example.md"
          },
          "markdown": {
            "type": "string",
            "description": "Raw markdown content to extract code blocks from (alternative to filePath)",
            "example": "## Example\n\n```js\nconsole.log(\"Hello, world!\");\n```"
          }
        }
      },
      "CreateRepoDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the repository",
            "example": "oauth-repo-test",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "A short description of the repository",
            "example": "A repository created via NestJS GitHub OAuth.",
            "maxLength": 500
          },
          "private": {
            "type": "boolean",
            "description": "Whether the repository should be private (true) or public (false)",
            "example": false,
            "default": false
          }
        },
        "required": [
          "name"
        ]
      },
      "RepoResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The GitHub ID of the repository",
            "example": 123456789
          },
          "name": {
            "type": "string",
            "description": "The name of the repository",
            "example": "oauth-repo-test"
          },
          "full_name": {
            "type": "string",
            "description": "The full name including owner (e.g., octocat/oauth-repo-test)",
            "example": "octocat/oauth-repo-test"
          },
          "owner": {
            "type": "object",
            "description": "The owner of the repository",
            "example": "octocat"
          },
          "description": {
            "type": "object",
            "description": "A short description of the repository",
            "example": "A NestJS project"
          },
          "html_url": {
            "type": "string",
            "description": "URL to the repository on GitHub",
            "example": "https://github.com/octocat/oauth-repo-test"
          },
          "private": {
            "type": "boolean",
            "description": "Whether the repository is private or public",
            "example": false
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the repository was created",
            "example": "2023-10-27T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the repository was last updated",
            "example": "2023-10-27T11:30:00Z"
          },
          "pushed_at": {
            "type": "string",
            "description": "The date and time the repository was last pushed to",
            "example": "2023-10-27T11:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "full_name",
          "owner",
          "description",
          "html_url",
          "private",
          "created_at",
          "updated_at",
          "pushed_at"
        ]
      },
      "CommitRepoDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The commit message for the file change",
            "example": "feat: add initial oauth commit-log file",
            "minLength": 1,
            "maxLength": 200
          }
        },
        "required": [
          "message"
        ]
      },
      "RepoContentLinksDto": {
        "type": "object",
        "properties": {
          "git": {
            "type": "string",
            "description": "Git API URL for the content"
          },
          "self": {
            "type": "string",
            "description": "Self API URL for the content"
          },
          "html": {
            "type": "string",
            "description": "HTML URL for the content on GitHub"
          }
        },
        "required": [
          "git",
          "self",
          "html"
        ]
      },
      "RepoContentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the file or directory"
          },
          "path": {
            "type": "string",
            "description": "Path of the file or directory within the repository"
          },
          "sha": {
            "type": "string",
            "description": "SHA hash of the content"
          },
          "type": {
            "type": "string",
            "description": "Type of the content",
            "enum": [
              "file",
              "dir",
              "symlink",
              "submodule"
            ]
          },
          "size": {
            "type": "number",
            "description": "Size of the content in bytes (for files only)"
          },
          "url": {
            "type": "string",
            "description": "API URL to get the content details"
          },
          "html_url": {
            "type": "string",
            "description": "HTML URL to view the content on GitHub"
          },
          "git_url": {
            "type": "string",
            "description": "Git URL for the content"
          },
          "download_url": {
            "type": "string",
            "description": "Download URL for file content (only for files)"
          },
          "content": {
            "type": "string",
            "description": "Base64 encoded content of the file (only if fetching a single file and not directory listing)"
          },
          "encoding": {
            "type": "string",
            "description": "Encoding of the content (e.g., \"base64\")"
          },
          "_links": {
            "description": "Links related to the content",
            "allOf": [
              {
                "$ref": "#/components/schemas/RepoContentLinksDto"
              }
            ]
          }
        },
        "required": [
          "name",
          "path",
          "sha",
          "type",
          "size",
          "url",
          "html_url",
          "git_url",
          "_links"
        ]
      },
      "CreateSystemInstructionDto": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "requestId field"
          },
          "instruction": {
            "type": "string",
            "description": "instruction field"
          },
          "persona": {
            "type": "string",
            "description": "persona field"
          }
        },
        "required": [
          "requestId",
          "instruction",
          "persona"
        ]
      },
      "PaginationSystemInstructionResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSystemInstructionDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateSystemInstructionDto": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "requestId field"
          },
          "instruction": {
            "type": "string",
            "description": "instruction field"
          },
          "persona": {
            "type": "string",
            "description": "persona field"
          }
        }
      },
      "LintCodeDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code content to lint",
            "example": "const x = 1;"
          },
          "filePath": {
            "type": "string",
            "description": "Optional: The file path, used by ESLint to find configs/determine language. Relative to CWD.",
            "example": "src/app.ts"
          },
          "cwd": {
            "type": "string",
            "description": "Optional: The current working directory from which ESLint should resolve configurations and plugins.",
            "example": "/path/to/project/root"
          }
        },
        "required": [
          "code"
        ]
      },
      "DiagnosticDto": {
        "type": "object",
        "properties": {}
      },
      "LintFileDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code content of the file to lint",
            "example": "const x = 1;"
          },
          "filePath": {
            "type": "string",
            "description": "The virtual file path for this code content, used by ESLint to find configs/determine language. Relative to CWD.",
            "example": "src/components/MyComponent.tsx"
          }
        },
        "required": [
          "code",
          "filePath"
        ]
      },
      "LintFilesDto": {
        "type": "object",
        "properties": {
          "files": {
            "description": "An array of file objects, each containing code content and its virtual file path.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LintFileDto"
            }
          },
          "cwd": {
            "type": "string",
            "description": "Optional: The current working directory from which ESLint should resolve configurations and plugins.",
            "example": "/path/to/project/root"
          }
        },
        "required": [
          "files"
        ]
      },
      "LintDirectoryDto": {
        "type": "object",
        "properties": {
          "directoryPath": {
            "type": "string",
            "description": "The absolute or relative path to the directory to lint.",
            "example": "./src/components"
          },
          "cwd": {
            "type": "string",
            "description": "Optional: The current working directory from which ESLint should resolve configurations and plugins.",
            "example": "/path/to/project/root"
          }
        },
        "required": [
          "directoryPath"
        ]
      },
      "LlmInputDto": {
        "type": "object",
        "properties": {
          "userPrompt": {
            "type": "string",
            "description": "The main request or prompt from the user to the AI.",
            "example": "Implement a new user authentication module with JWT. Include login and register endpoints."
          },
          "projectRoot": {
            "type": "string",
            "description": "The absolute path to the root directory of the project being edited.",
            "example": "/path/to/your/project"
          },
          "projectStructure": {
            "type": "string",
            "description": "A high-level overview of the project directory structure, typically generated as a tree string or simplified list.",
            "example": "\nproject-root/\n├── src/\n│   ├── app.module.ts\n│   ├── app.controller.ts\n│   └── main.ts\n├── package.json\n└── tsconfig.json\n"
          },
          "relevantFiles": {
            "description": "An array of relevant files from the project, including their paths and content, for the LLM to analyze or modify.",
            "example": [
              {
                "filePath": "/path/to/your/project/src/app.module.ts",
                "relativePath": "src/app.module.ts",
                "content": "import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n"
              },
              {
                "filePath": "/path/to/your/project/src/app.controller.ts",
                "relativePath": "src/app.controller.ts",
                "content": "import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n"
              }
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "additionalInstructions": {
            "type": "string",
            "description": "Additional instructions or constraints for the LLM regarding its behavior, style, or specific requirements.",
            "example": "Ensure all new code adheres to TypeScript strict mode. Use functional components for React. Avoid external libraries unless specified."
          },
          "expectedOutputFormat": {
            "type": "string",
            "description": "Detailed instructions on the exact JSON format the LLM is expected to return for its response.",
            "example": "\n{\n  \"summary\": \"A brief summary of the proposed changes.\",\n  \"thoughtProcess\": \"Detailed explanation of the AI's reasoning and steps taken.\",\n  \"changes\": [\n    {\n      \"filePath\": \"path/to/file.ts\",\n      \"action\": \"add\" | \"modify\" | \"delete\",\n      \"newContent\": \"Optional: New content for 'add'/'modify'\",\n      \"reason\": \"Optional: Explanation for this specific change\"\n    }\n  ]\n}\n"
          },
          "scanPaths": {
            "description": " An array of paths (relative to projectRoot) to explicitly scan. If not provided, the AI may decide which files to include based on context.",
            "example": [
              "src/components",
              "package.json",
              "README.md"
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "userPrompt",
          "projectRoot",
          "additionalInstructions",
          "expectedOutputFormat",
          "scanPaths"
        ]
      },
      "ProposedFileChangeDto": {
        "type": "object",
        "properties": {
          "filePath": {
            "type": "string",
            "description": "The absolute or relative path of the file to be changed.",
            "example": "src/components/WelcomeMessage.tsx"
          },
          "action": {
            "type": "string",
            "enum": [
              "add",
              "modify",
              "delete"
            ],
            "description": "The type of operation to perform on the file.",
            "example": "add"
          },
          "newContent": {
            "type": "string",
            "description": "The new content of the file for \"add\" or \"modify\" operations. Not applicable for \"delete\".",
            "example": "import React from \"react\";\n\nconst WelcomeMessage = () => <div>Hello, AI User!</div>;\n\nexport default WelcomeMessage;"
          },
          "reason": {
            "type": "string",
            "description": "A brief explanation or justification for this specific file change.",
            "example": "New component to display a welcome message."
          }
        },
        "required": [
          "filePath",
          "action"
        ]
      },
      "LlmOutputDto": {
        "type": "object",
        "properties": {
          "changes": {
            "description": "A list of proposed file changes generated by the LLM.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProposedFileChangeDto"
            }
          },
          "summary": {
            "type": "string",
            "description": "A concise summary provided by the LLM, describing the overall changes or solution.",
            "example": "Implemented a new React component `WelcomeMessage.tsx` to display a greeting message."
          },
          "thoughtProcess": {
            "type": "string",
            "description": "The LLM's detailed thought process or reasoning behind the proposed changes.",
            "example": "The user requested a React component, so I created a functional component in TypeScript. I decided to place it in `src/components` for better organization and provided a simple \"Hello\" message as a starting point, anticipating future customization."
          }
        },
        "required": [
          "changes",
          "summary"
        ]
      },
      "CreateTerminalSessionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "startedAt field"
          },
          "endedAt": {
            "format": "date-time",
            "type": "string",
            "description": "endedAt field"
          },
          "ipAddress": {
            "type": "string",
            "description": "ipAddress field"
          },
          "userAgent": {
            "type": "string",
            "description": "userAgent field"
          },
          "clientInfo": {
            "type": "object",
            "description": "clientInfo field"
          }
        },
        "required": [
          "name",
          "startedAt",
          "endedAt",
          "ipAddress",
          "userAgent",
          "clientInfo"
        ]
      },
      "PaginationTerminalSessionResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTerminalSessionDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateTerminalSessionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name field"
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "startedAt field"
          },
          "endedAt": {
            "format": "date-time",
            "type": "string",
            "description": "endedAt field"
          },
          "ipAddress": {
            "type": "string",
            "description": "ipAddress field"
          },
          "userAgent": {
            "type": "string",
            "description": "userAgent field"
          },
          "clientInfo": {
            "type": "object",
            "description": "clientInfo field"
          }
        }
      },
      "CreateTerminalCommandDto": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "command field"
          },
          "description": {
            "type": "string",
            "description": "description field"
          },
          "output": {
            "type": "string",
            "description": "output field"
          },
          "tags": {
            "description": "tags field",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isFavorite": {
            "type": "boolean",
            "description": "isFavorite field"
          }
        },
        "required": [
          "command",
          "description",
          "output",
          "tags",
          "isFavorite"
        ]
      },
      "PaginationTerminalCommandResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTerminalCommandDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateTerminalCommandDto": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "command field"
          },
          "description": {
            "type": "string",
            "description": "description field"
          },
          "output": {
            "type": "string",
            "description": "output field"
          },
          "tags": {
            "description": "tags field",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isFavorite": {
            "type": "boolean",
            "description": "isFavorite field"
          }
        }
      },
      "CreateCommandHistoryDto": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "command field"
          },
          "executedAt": {
            "format": "date-time",
            "type": "string",
            "description": "executedAt field"
          },
          "status": {
            "type": "string",
            "description": "status field"
          },
          "exitCode": {
            "type": "number",
            "description": "exitCode field"
          },
          "output": {
            "type": "string",
            "description": "output field"
          },
          "errorOutput": {
            "type": "string",
            "description": "errorOutput field"
          },
          "workingDirectory": {
            "type": "string",
            "description": "workingDirectory field"
          },
          "durationMs": {
            "type": "number",
            "description": "durationMs field"
          },
          "shellType": {
            "type": "string",
            "description": "shellType field"
          },
          "terminalSessionId": {
            "type": "string",
            "description": "terminalSessionId field"
          }
        },
        "required": [
          "command",
          "executedAt",
          "status",
          "exitCode",
          "output",
          "errorOutput",
          "workingDirectory",
          "durationMs",
          "shellType",
          "terminalSessionId"
        ]
      },
      "PaginationCommandHistoryResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCommandHistoryDto"
            }
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "UpdateCommandHistoryDto": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "command field"
          },
          "executedAt": {
            "format": "date-time",
            "type": "string",
            "description": "executedAt field"
          },
          "status": {
            "type": "string",
            "description": "status field"
          },
          "exitCode": {
            "type": "number",
            "description": "exitCode field"
          },
          "output": {
            "type": "string",
            "description": "output field"
          },
          "errorOutput": {
            "type": "string",
            "description": "errorOutput field"
          },
          "workingDirectory": {
            "type": "string",
            "description": "workingDirectory field"
          },
          "durationMs": {
            "type": "number",
            "description": "durationMs field"
          },
          "shellType": {
            "type": "string",
            "description": "shellType field"
          },
          "terminalSessionId": {
            "type": "string",
            "description": "terminalSessionId field"
          }
        }
      }
    }
  }
}